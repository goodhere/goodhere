"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const styled_components_1 = tslib_1.__importDefault(require("styled-components"));
const is_prop_valid_1 = tslib_1.__importDefault(require("@emotion/is-prop-valid"));
function isValidProp(key) {
    return is_prop_valid_1.default(key);
}
function filterSVGProps(props) {
    return Object.keys(props).reduce((p, k) => {
        if (isValidProp(k)) {
            // hack to satisfy TypeScript complexity
            ;
            p[k] = props[k];
        }
        return p;
    }, {});
}
const StyledIconBaseBase = React.forwardRef((props, ref) => {
    const { children, iconAttrs, iconVerticalAlign, iconViewBox, size, title } = props, otherProps = tslib_1.__rest(props, ["children", "iconAttrs", "iconVerticalAlign", "iconViewBox", "size", "title"]);
    const iconProps = Object.assign({ viewBox: iconViewBox, height: props.height !== undefined ? props.height : size, width: props.width !== undefined ? props.width : size, 'aria-hidden': title == null ? 'true' : undefined, focusable: 'false', role: title != null ? 'img' : undefined }, iconAttrs);
    const svgProps = filterSVGProps(otherProps);
    return (React.createElement("svg", Object.assign({}, iconProps, svgProps, { ref: ref }),
        title && React.createElement("title", { key: "icon-title" }, title),
        children));
});
exports.StyledIconBase = styled_components_1.default(StyledIconBaseBase) `
  display: inline-block;
  vertical-align: ${props => props.iconVerticalAlign};
  overflow: hidden;
`;
