import SearchParameters from './SearchParameters';
import { SearchForFacetValuesQueryParams } from '@algolia/client-search';
import { SearchOptions } from '@algolia/client-search';
declare type HierarchicalFacet = {
    name: string;
    attributes: string[];
    separator: string;
    rootPath?: string;
    sortBy: string[];
    showParentLevel: boolean;
};
declare var requestBuilder: {
    /**
     * Get all the queries to send to the client, those queries can used directly
     * with the Algolia client.
     * @private
     * @return {object[]} The queries
     */
    _getQueries: (index: string, state: SearchParameters) => any[];
    /**
     * Build search parameters used to fetch hits
     * @private
     * @return {object.<string, any>}
     */
    _getHitsSearchParams: (state: SearchParameters) => any;
    /**
     * Build search parameters used to fetch a disjunctive facet
     * @private
     * @param  {string} facet the associated facet name
     * @param  {boolean} hierarchicalRootLevel ?? FIXME
     * @return {object}
     */
    _getDisjunctiveFacetSearchParams: (state: SearchParameters, facet: string, hierarchicalRootLevel: boolean) => any;
    /**
     * Return the numeric filters in an algolia request fashion
     * @private
     * @param {string} [facetName] the name of the attribute for which the filters should be excluded
     * @return {string[]} the numeric filters in the algolia format
     */
    _getNumericFilters: (state: SearchParameters, facetName?: string | undefined) => (string | string[])[];
    /**
     * Return the tags filters depending
     * @private
     * @return {string}
     */
    _getTagFilters: (state: SearchParameters) => string | string[];
    /**
     * Build facetFilters parameter based on current refinements. The array returned
     * contains strings representing the facet filters in the algolia format.
     * @private
     * @param  {string} [facet] if set, the current disjunctive facet
     * @return {array.<string>}
     */
    _getFacetFilters: (state: SearchParameters, facet?: string | undefined, hierarchicalRootLevel?: boolean | undefined) => (string | string[])[];
    _getHitsHierarchicalFacetsAttributes: (state: SearchParameters) => string[];
    _getDisjunctiveHierarchicalFacetAttribute: (state: SearchParameters, hierarchicalFacet: HierarchicalFacet, rootLevel: boolean) => string[];
    getSearchForFacetQuery: (facetName: string, query: string, maxFacetHits: number, state: SearchParameters) => SearchForFacetValuesQueryParams & SearchOptions;
};
export default requestBuilder;
