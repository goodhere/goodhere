"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.Message = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireDefault(require("react"));

var _ink = require("ink");

var _constants = require("../../../constants");

const ColorSwitcher = (_ref) => {
  let children = _ref.children,
      props = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["children"]);
  return _react.default.createElement(_ink.Color, props, children);
};

const createLabel = (text, color) => (...props) => _react.default.createElement(ColorSwitcher, Object.assign({
  [color]: true
}, props), text);

const getLabel = level => {
  switch (level) {
    case _constants.ActivityLogLevels.Success:
    case _constants.LogLevels.Success:
      return createLabel(`success`, `green`);

    case _constants.LogLevels.Warning:
      return createLabel(`warn`, `yellow`);

    case _constants.LogLevels.Debug:
      return createLabel(`verbose`, `gray`);

    case _constants.LogLevels.Info:
      return createLabel(`info`, `blue`);

    case _constants.ActivityLogLevels.Failed:
      return createLabel(`failed`, `red`);

    case _constants.ActivityLogLevels.Interrupted:
      return createLabel(`not finished`, `gray`);

    default:
      return createLabel(level, `blue`);
  }
};

const Message = _react.default.memo(({
  level,
  text,
  duration,
  statusText
}) => {
  let message = text;

  if (duration) {
    message += ` - ${duration.toFixed(3)}s`;
  }

  if (statusText) {
    message += ` - ${statusText}`;
  }

  if (!level || level === `LOG`) {
    return _react.default.createElement(_react.default.Fragment, null, message);
  }

  const TextLabel = getLabel(level);
  return _react.default.createElement(_ink.Box, {
    textWrap: "wrap",
    flexDirection: "row"
  }, _react.default.createElement(TextLabel, null), ` `, message);
});

exports.Message = Message;