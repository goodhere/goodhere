"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _index = require("../../redux/index");

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

var _lodash = _interopRequireDefault(require("lodash"));

const _require = require(`../../constants`),
      Actions = _require.Actions,
      LogLevels = _require.LogLevels;

(0, _index.onLogAction)(action => {
  const sanitizedAction = Object.assign({}, action, {
    /* Payload can either be a String or an Object
     * See more at integration-tests/structured-logging/__tests__/to-do.js
     */
    payload: _lodash.default.isPlainObject(action.payload) ? Object.assign({}, action.payload, {
      text: (0, _stripAnsi.default)(action.payload.text),
      statusText: (0, _stripAnsi.default)(action.payload.statusText)
    }) : action.payload
  }); // we mutate sanitzedAction but this is already deep copy of action so we should be good

  if (sanitizedAction.type === Actions.Log) {
    // Don't emit Debug over IPC
    if ([LogLevels.Debug].includes(sanitizedAction.payload.level)) {
      return;
    } // Override Success and Log types to Info over IPC


    if ([LogLevels.Success, LogLevels.Log].includes(sanitizedAction.payload.level)) {
      sanitizedAction.payload.level = LogLevels.Info;
    }
  }

  process.send({
    type: Actions.LogAction,
    action: sanitizedAction
  });
});