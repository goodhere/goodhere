#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es7.array.flat-map");

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.array.sort");

require("core-js/modules/es6.array.species");

require("core-js/modules/es6.function.has-instance");

require("core-js/modules/es6.map");

require("core-js/modules/es7.object.define-getter");

require("core-js/modules/es7.object.define-setter");

require("core-js/modules/es7.object.entries");

require("core-js/modules/es7.object.get-own-property-descriptors");

require("core-js/modules/es7.object.lookup-getter");

require("core-js/modules/es7.object.lookup-setter");

require("core-js/modules/es6.object.to-string");

require("core-js/modules/es7.object.values");

require("core-js/modules/es6.promise");

require("core-js/modules/es7.promise.finally");

require("core-js/modules/es6.set");

require("core-js/modules/es6.symbol");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es7.string.pad-start");

require("core-js/modules/es7.string.pad-end");

require("core-js/modules/es7.string.trim-left");

require("core-js/modules/es7.string.trim-right");

require("core-js/modules/es6.typed.array-buffer");

require("core-js/modules/es6.typed.int8-array");

require("core-js/modules/es6.typed.uint8-array");

require("core-js/modules/es6.typed.uint8-clamped-array");

require("core-js/modules/es6.typed.int16-array");

require("core-js/modules/es6.typed.uint16-array");

require("core-js/modules/es6.typed.int32-array");

require("core-js/modules/es6.typed.uint32-array");

require("core-js/modules/es6.typed.float32-array");

require("core-js/modules/es6.typed.float64-array");

require("core-js/modules/es6.weak-map");

require("core-js/modules/es6.weak-set");

var _os = _interopRequireDefault(require("os"));

var _semver = _interopRequireDefault(require("semver"));

var _util = _interopRequireDefault(require("util"));

var _createCli = _interopRequireDefault(require("./create-cli"));

var _reporter = _interopRequireDefault(require("./reporter"));

var _package = _interopRequireDefault(require("../package.json"));

var _updateNotifier = _interopRequireDefault(require("update-notifier"));

var _ensureWindowsDriveLetterIsUppercase = require("./util/ensure-windows-drive-letter-is-uppercase");

const useJsonLogger = process.argv.slice(2).some(arg => arg.includes(`json`));

if (useJsonLogger) {
  process.env.GATSBY_LOGGER = `json`;
} // Ensure stable runs on Windows when started from different shells (i.e. c:\dir vs C:\dir)


if (_os.default.platform() === `win32`) {
  (0, _ensureWindowsDriveLetterIsUppercase.ensureWindowsDriveLetterIsUppercase)();
} // Check if update is available


(0, _updateNotifier.default)({
  pkg: _package.default
}).notify({
  isGlobal: true
});
const MIN_NODE_VERSION = `10.13.0`; // const NEXT_MIN_NODE_VERSION = `10.13.0`

if (!_semver.default.satisfies(process.version, `>=${MIN_NODE_VERSION}`)) {
  _reporter.default.panic(_reporter.default.stripIndent(`
      Gatsby requires Node.js ${MIN_NODE_VERSION} or higher (you have ${process.version}).
      Upgrade Node to the latest stable release: https://gatsby.dev/upgrading-node-js
    `));
} // if (!semver.satisfies(process.version, `>=${NEXT_MIN_NODE_VERSION}`)) {
//   report.warn(
//     report.stripIndent(`
//       Node.js ${process.version} has reached End of Life status on 31 December, 2019.
//       Gatsby will only actively support ${NEXT_MIN_NODE_VERSION} or higher and drop support for Node 8 soon.
//       Please upgrade Node.js to a currently active LTS release: https://gatsby.dev/upgrading-node-js
//     `)
//   )
// }


process.on(`unhandledRejection`, reason => {
  // This will exit the process in newer Node anyway so lets be consistent
  // across versions and crash
  // reason can be anything, it can be a message, an object, ANYTHING!
  // we convert it to an error object so we don't crash on structured error validation
  if (!(reason instanceof Error)) {
    reason = new Error(_util.default.format(reason));
  }

  _reporter.default.panic(`UNHANDLED REJECTION`, reason);
});
process.on(`uncaughtException`, error => {
  _reporter.default.panic(`UNHANDLED EXCEPTION`, error);
});
(0, _createCli.default)(process.argv);