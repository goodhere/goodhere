{"version":3,"sources":["../../../src/bootstrap/load-plugins/load.js"],"names":["_","require","slash","fs","path","crypto","glob","warnOnIncompatiblePeerDependency","store","existsSync","sync","createRequireFromPath","createFileContentHash","root","globPattern","hash","createHash","files","nodir","forEach","filepath","update","readFileSync","digest","createPluginId","name","pluginObject","JSON","stringify","options","resolvePlugin","pluginName","rootDir","resolvedPath","resolve","packageJSON","parse","id","version","Error","requireSource","dirname","isAbsolute","err","loadPlugins","config","plugins","processPlugin","plugin","isString","info","pluginOptions","subplugins","p","push","merge","internalPlugins","relPath","absPath","join","__dirname","pathCheck","process","cwd","program","getState","pageCreatorOptions","directory","pageCreatorPlugin","find","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst { slash } = require(`gatsby-core-utils`)\nconst fs = require(`fs`)\nconst path = require(`path`)\nconst crypto = require(`crypto`)\nconst glob = require(`glob`)\nconst { warnOnIncompatiblePeerDependency } = require(`./validate`)\nconst { store } = require(`../../redux`)\nconst existsSync = require(`fs-exists-cached`).sync\nimport { createNodeId } from \"../../utils/create-node-id\"\nconst { createRequireFromPath } = require(`gatsby-core-utils`)\n\nfunction createFileContentHash(root, globPattern) {\n  const hash = crypto.createHash(`md5`)\n  const files = glob.sync(`${root}/${globPattern}`, { nodir: true })\n\n  files.forEach(filepath => {\n    hash.update(fs.readFileSync(filepath))\n  })\n\n  return hash.digest(`hex`)\n}\n\n/**\n * Make sure key is unique to plugin options. E.g. there could\n * be multiple source-filesystem plugins, with different names\n * (docs, blogs).\n * @param {*} name Name of the plugin\n * @param {*} pluginObject\n */\nconst createPluginId = (name, pluginObject = null) =>\n  createNodeId(\n    name + (pluginObject ? JSON.stringify(pluginObject.options) : ``),\n    `Plugin`\n  )\n\n/**\n * @typedef {Object} PluginInfo\n * @property {string} resolve The absolute path to the plugin\n * @property {string} name The plugin name\n * @property {string} version The plugin version (can be content hash)\n */\n\n/**\n * resolvePlugin\n * @param {string} pluginName\n * This can be a name of a local plugin, the name of a plugin located in\n * node_modules, or a Gatsby internal plugin. In the last case the pluginName\n * will be an absolute path.\n * @param {string} rootDir\n * This is the project location, from which are found the plugins\n * @return {PluginInfo}\n */\nfunction resolvePlugin(pluginName, rootDir) {\n  // Only find plugins when we're not given an absolute path\n  if (!existsSync(pluginName)) {\n    // Find the plugin in the local plugins folder\n    const resolvedPath = slash(path.resolve(`./plugins/${pluginName}`))\n\n    if (existsSync(resolvedPath)) {\n      if (existsSync(`${resolvedPath}/package.json`)) {\n        const packageJSON = JSON.parse(\n          fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n        )\n        const name = packageJSON.name || pluginName\n        warnOnIncompatiblePeerDependency(name, packageJSON)\n\n        return {\n          resolve: resolvedPath,\n          name,\n          id: createPluginId(name),\n          version:\n            packageJSON.version || createFileContentHash(resolvedPath, `**`),\n        }\n      } else {\n        // Make package.json a requirement for local plugins too\n        throw new Error(`Plugin ${pluginName} requires a package.json file`)\n      }\n    }\n  }\n\n  /**\n   * Here we have an absolute path to an internal plugin, or a name of a module\n   * which should be located in node_modules.\n   */\n  try {\n    const requireSource =\n      rootDir !== null\n        ? createRequireFromPath(`${rootDir}/:internal:`)\n        : require\n\n    // If the path is absolute, resolve the directory of the internal plugin,\n    // otherwise resolve the directory containing the package.json\n    const resolvedPath = slash(\n      path.dirname(\n        requireSource.resolve(\n          path.isAbsolute(pluginName)\n            ? pluginName\n            : `${pluginName}/package.json`\n        )\n      )\n    )\n\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n    )\n    warnOnIncompatiblePeerDependency(packageJSON.name, packageJSON)\n\n    return {\n      resolve: resolvedPath,\n      id: createPluginId(packageJSON.name),\n      name: packageJSON.name,\n      version: packageJSON.version,\n    }\n  } catch (err) {\n    throw new Error(\n      `Unable to find plugin \"${pluginName}\". Perhaps you need to install its package?`\n    )\n  }\n}\n\nconst loadPlugins = (config = {}, rootDir = null) => {\n  // Instantiate plugins.\n  const plugins = []\n\n  // Create fake little site with a plugin for testing this\n  // w/ snapshots. Move plugin processing to its own module.\n  // Also test adding to redux store.\n  const processPlugin = plugin => {\n    if (_.isString(plugin)) {\n      const info = resolvePlugin(plugin, rootDir)\n\n      return {\n        ...info,\n        pluginOptions: {\n          plugins: [],\n        },\n      }\n    } else {\n      plugin.options = plugin.options || {}\n\n      // Plugins can have plugins.\n      const subplugins = []\n      if (plugin.options.plugins) {\n        plugin.options.plugins.forEach(p => {\n          subplugins.push(processPlugin(p))\n        })\n\n        plugin.options.plugins = subplugins\n      }\n\n      // Add some default values for tests as we don't actually\n      // want to try to load anything during tests.\n      if (plugin.resolve === `___TEST___`) {\n        const name = `TEST`\n\n        return {\n          id: createPluginId(name, plugin),\n          name,\n          pluginOptions: {\n            plugins: [],\n          },\n          resolve: `__TEST__`,\n        }\n      }\n\n      const info = resolvePlugin(plugin.resolve, rootDir)\n\n      return {\n        ...info,\n        id: createPluginId(info.name, plugin),\n        pluginOptions: _.merge({ plugins: [] }, plugin.options),\n      }\n    }\n  }\n\n  // Add internal plugins\n  const internalPlugins = [\n    `../../internal-plugins/dev-404-page`,\n    `../../internal-plugins/load-babel-config`,\n    `../../internal-plugins/internal-data-bridge`,\n    `../../internal-plugins/prod-404`,\n    `../../internal-plugins/webpack-theme-component-shadowing`,\n  ]\n  internalPlugins.forEach(relPath => {\n    const absPath = path.join(__dirname, relPath)\n    plugins.push(processPlugin(absPath))\n  })\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      plugins.push(processPlugin(plugin))\n    })\n  }\n\n  // the order of all of these page-creators matters. The \"last plugin wins\",\n  // so the user's site comes last, and each page-creator instance has to\n  // match the plugin definition order before that. This works fine for themes\n  // because themes have already been added in the proper order to the plugins\n  // array\n  plugins.forEach(plugin => {\n    plugins.push(\n      processPlugin({\n        resolve: require.resolve(`gatsby-plugin-page-creator`),\n        options: {\n          path: slash(path.join(plugin.resolve, `src/pages`)),\n          pathCheck: false,\n        },\n      })\n    )\n  })\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: createPluginId(`default-site-plugin`),\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n  })\n\n  const program = store.getState().program\n\n  // default options for gatsby-plugin-page-creator\n  let pageCreatorOptions = {\n    path: slash(path.join(program.directory, `src/pages`)),\n    pathCheck: false,\n  }\n\n  if (config.plugins) {\n    const pageCreatorPlugin = config.plugins.find(\n      plugin =>\n        plugin.resolve === `gatsby-plugin-page-creator` &&\n        slash(plugin.options.path || ``) ===\n          slash(path.join(program.directory, `src/pages`))\n    )\n    if (pageCreatorPlugin) {\n      // override the options if there are any user specified options\n      pageCreatorOptions = pageCreatorPlugin.options\n    }\n  }\n\n  plugins.push(\n    processPlugin({\n      resolve: require.resolve(`gatsby-plugin-page-creator`),\n      options: pageCreatorOptions,\n    })\n  )\n\n  return plugins\n}\n\nmodule.exports = {\n  loadPlugins,\n  resolvePlugin,\n}\n"],"file":"load.js"}