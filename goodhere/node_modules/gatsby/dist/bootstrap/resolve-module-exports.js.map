{"version":3,"sources":["../../src/bootstrap/resolve-module-exports.js"],"names":["staticallyAnalyzeExports","modulePath","resolver","require","resolve","absPath","exportNames","err","code","fs","readFileSync","ast","SyntaxError","codeFrame","start","loc","highlightCode","report","panic","message","isCommonJS","isES6","ImportDeclaration","astPath","ExportNamedDeclaration","exportName","push","ExportSpecifier","AssignmentExpression","nodeLeft","node","left","type","property","name","process","env","NODE_ENV","module","exports","mode","Object","keys","filter","e"],"mappings":"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","sourcesContent":["// @flow\nimport fs from \"fs\"\nimport traverse from \"@babel/traverse\"\nimport get from \"lodash/get\"\nimport { codeFrameColumns } from \"@babel/code-frame\"\nimport { babelParseToAst } from \"../utils/babel-parse-to-ast\"\nimport report from \"gatsby-cli/lib/reporter\"\n\nimport { testRequireError } from \"../utils/test-require-error\"\n\nconst staticallyAnalyzeExports = (modulePath, resolver = require.resolve) => {\n  let absPath\n  const exportNames = []\n\n  try {\n    absPath = resolver(modulePath)\n  } catch (err) {\n    return exportNames // doesn't exist\n  }\n  const code = fs.readFileSync(absPath, `utf8`) // get file contents\n\n  let ast\n  try {\n    ast = babelParseToAst(code, absPath)\n  } catch (err) {\n    if (err instanceof SyntaxError) {\n      // Pretty print syntax errors\n      const codeFrame = codeFrameColumns(\n        code,\n        {\n          start: err.loc,\n        },\n        {\n          highlightCode: true,\n        }\n      )\n\n      report.panic(\n        `Syntax error in \"${absPath}\":\\n${err.message}\\n${codeFrame}`\n      )\n    } else {\n      // if it's not syntax error, just throw it\n      throw err\n    }\n  }\n\n  let isCommonJS = false\n  let isES6 = false\n\n  // extract names of exports from file\n  traverse(ast, {\n    // Check if the file is using ES6 imports\n    ImportDeclaration: function ImportDeclaration(astPath) {\n      isES6 = true\n    },\n\n    // get foo from `export const foo = bar`\n    ExportNamedDeclaration: function ExportNamedDeclaration(astPath) {\n      const exportName = get(\n        astPath,\n        `node.declaration.declarations[0].id.name`\n      )\n      isES6 = true\n      if (exportName) exportNames.push(exportName)\n    },\n\n    // get foo from `export { foo } from 'bar'`\n    // get foo from `export { foo }`\n    ExportSpecifier: function ExportSpecifier(astPath) {\n      const exportName = get(astPath, `node.exported.name`)\n      isES6 = true\n      if (exportName) exportNames.push(exportName)\n    },\n\n    AssignmentExpression: function AssignmentExpression(astPath) {\n      const nodeLeft = astPath.node.left\n\n      if (nodeLeft.type !== `MemberExpression`) return\n\n      // ignore marker property `__esModule`\n      if (get(nodeLeft, `property.name`) === `__esModule`) return\n\n      // get foo from `exports.foo = bar`\n      if (get(nodeLeft, `object.name`) === `exports`) {\n        isCommonJS = true\n        exportNames.push(nodeLeft.property.name)\n      }\n\n      // get foo from `module.exports.foo = bar`\n      if (\n        get(nodeLeft, `object.object.name`) === `module` &&\n        get(nodeLeft, `object.property.name`) === `exports`\n      ) {\n        isCommonJS = true\n        exportNames.push(nodeLeft.property.name)\n      }\n    },\n  })\n\n  if (isES6 && isCommonJS && process.env.NODE_ENV !== `test`) {\n    report.panic(\n      `This plugin file is using both CommonJS and ES6 module systems together which we don't support.\nYou'll need to edit the file to use just one or the other.\n\nplugin: ${modulePath}.js\n\nThis didn't cause a problem in Gatsby v1 so you might want to review the migration doc for this:\nhttps://gatsby.dev/no-mixed-modules\n      `\n    )\n  }\n  return exportNames\n}\n\n/**\n * Given a `require.resolve()` compatible path pointing to a JS module,\n * return an array listing the names of the module's exports.\n *\n * Returns [] for invalid paths and modules without exports.\n *\n * @param {string} modulePath\n * @param {string} mode\n * @param {function} resolver\n */\nmodule.exports = (\n  modulePath,\n  { mode = `analysis`, resolver = require.resolve } = {}\n) => {\n  if (mode === `require`) {\n    let absPath\n    try {\n      absPath = resolver(modulePath)\n      return Object.keys(require(modulePath)).filter(\n        exportName => exportName !== `__esModule`\n      )\n    } catch (e) {\n      if (!testRequireError(modulePath, e)) {\n        // if module exists, but requiring it cause errors,\n        // show the error to the user and terminate build\n        report.panic(`Error in \"${absPath}\":`, e)\n      }\n    }\n  } else {\n    return staticallyAnalyzeExports(modulePath, resolver)\n  }\n\n  return []\n}\n"],"file":"resolve-module-exports.js"}