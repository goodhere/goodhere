{"version":3,"sources":["../../src/bootstrap/schema-hot-reloader.ts"],"names":["inferredTypesChanged","typeMap","prevTypeMap","Object","keys","some","type","dirty","schemaChanged","schemaCustomization","lastSchemaCustomization","key","lastMetadata","maybeRebuildSchema","inferenceMetadata","store","getState","activity","report","activityTimer","start","parentSpan","end","bootstrapSchemaHotReloader","emitter","on"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAOA,MAAMA,oBAAoB,GAAG,CAC3BC,OAD2B,EAE3BC,WAF2B,KAI3BC,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,IAArB,CACEC,IAAI,IACFL,OAAO,CAACK,IAAD,CAAP,CAAcC,KAAd,IAAuB,CAAC,wCAAgBN,OAAO,CAACK,IAAD,CAAvB,EAA+BJ,WAAW,CAACI,IAAD,CAA1C,CAF5B,CAJF;;AASA,MAAME,aAAa,GAAG,CACpBC,mBADoB,EAEpBC,uBAFoB,KAIpB,CAAE,iBAAF,EAAqB,aAArB,EAAoC,mBAApC,EAAyD,OAAzD,EAAiEL,IAAjE,CACEM,GAAG,IAAIF,mBAAmB,CAACE,GAAD,CAAnB,KAA6BD,uBAAuB,CAACC,GAAD,CAD7D,CAJF;;AAQA,IAAIC,YAAJ;AACA,IAAIF,uBAAJ,C,CAEA;AACA;;AACA,MAAMG,kBAAkB,GAAG,sBAAS,YAA2B;AAC7D,QAAM;AAAEC,IAAAA,iBAAF;AAAqBL,IAAAA;AAArB,MAA6CM,aAAMC,QAAN,EAAnD;;AAEA,MACE,CAAChB,oBAAoB,CAACc,iBAAiB,CAACb,OAAnB,EAA4BW,YAAY,CAACX,OAAzC,CAArB,IACA,CAACO,aAAa,CAACC,mBAAD,EAAsBC,uBAAtB,CAFhB,EAGE;AACA;AACD;;AAED,QAAMO,QAAQ,GAAGC,kBAAOC,aAAP,CAAsB,gBAAtB,CAAjB;;AACAF,EAAAA,QAAQ,CAACG,KAAT;AACAR,EAAAA,YAAY,GAAG,uBAAUE,iBAAV,CAAf;AACAJ,EAAAA,uBAAuB,GAAGD,mBAA1B;AACA,QAAM,qBAAQ;AAAEY,IAAAA,UAAU,EAAEJ;AAAd,GAAR,CAAN;AACA,QAAM,4CAAyB,KAAzB,EAAgC;AAAEI,IAAAA,UAAU,EAAEJ;AAAd,GAAhC,CAAN;AACAA,EAAAA,QAAQ,CAACK,GAAT;AACD,CAjB0B,EAiBxB,IAjBwB,CAA3B;;AAmBO,MAAMC,0BAA0B,GAAG,MAAY;AACpD,QAAM;AAAET,IAAAA,iBAAF;AAAqBL,IAAAA;AAArB,MAA6CM,aAAMC,QAAN,EAAnD;;AACAJ,EAAAA,YAAY,GAAG,uBAAUE,iBAAV,CAAf;AACAJ,EAAAA,uBAAuB,GAAGD,mBAA1B;;AACAe,iBAAQC,EAAR,CAAY,yBAAZ,EAAsCZ,kBAAtC;AACD,CALM","sourcesContent":["import { debounce, cloneDeep } from \"lodash\"\nimport { emitter, store } from \"../redux\"\nimport { rebuild } from \"../schema\"\nimport { haveEqualFields } from \"../schema/infer/inference-metadata\"\nimport { updateStateAndRunQueries } from \"../query/query-watcher\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport { IGatsbyState } from \"../redux/types\"\n\ntype TypeMap = IGatsbyState[\"inferenceMetadata\"][\"typeMap\"]\ntype SchemaCustomization = IGatsbyState[\"schemaCustomization\"]\ntype InferenceMetadata = IGatsbyState[\"inferenceMetadata\"]\n\nconst inferredTypesChanged = (\n  typeMap: TypeMap,\n  prevTypeMap: TypeMap\n): boolean =>\n  Object.keys(typeMap).some(\n    type =>\n      typeMap[type].dirty && !haveEqualFields(typeMap[type], prevTypeMap[type])\n  )\n\nconst schemaChanged = (\n  schemaCustomization: SchemaCustomization,\n  lastSchemaCustomization: SchemaCustomization\n): boolean =>\n  [`fieldExtensions`, `printConfig`, `thirdPartySchemas`, `types`].some(\n    key => schemaCustomization[key] !== lastSchemaCustomization[key]\n  )\n\nlet lastMetadata: InferenceMetadata\nlet lastSchemaCustomization: SchemaCustomization\n\n// API_RUNNING_QUEUE_EMPTY could be emitted multiple types\n// in a short period of time, so debounce seems reasonable\nconst maybeRebuildSchema = debounce(async (): Promise<void> => {\n  const { inferenceMetadata, schemaCustomization } = store.getState()\n\n  if (\n    !inferredTypesChanged(inferenceMetadata.typeMap, lastMetadata.typeMap) &&\n    !schemaChanged(schemaCustomization, lastSchemaCustomization)\n  ) {\n    return\n  }\n\n  const activity = report.activityTimer(`rebuild schema`)\n  activity.start()\n  lastMetadata = cloneDeep(inferenceMetadata)\n  lastSchemaCustomization = schemaCustomization\n  await rebuild({ parentSpan: activity })\n  await updateStateAndRunQueries(false, { parentSpan: activity })\n  activity.end()\n}, 1000)\n\nexport const bootstrapSchemaHotReloader = (): void => {\n  const { inferenceMetadata, schemaCustomization } = store.getState()\n  lastMetadata = cloneDeep(inferenceMetadata)\n  lastSchemaCustomization = schemaCustomization\n  emitter.on(`API_RUNNING_QUEUE_EMPTY`, maybeRebuildSchema)\n}\n"],"file":"schema-hot-reloader.js"}