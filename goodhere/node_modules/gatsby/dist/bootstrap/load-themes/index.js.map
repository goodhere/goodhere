{"version":3,"sources":["../../../src/bootstrap/load-themes/index.js"],"names":["path","require","mergeGatsbyConfig","Promise","_","debug","preferDefault","resolvePlugin","reporter","resolveTheme","themeSpec","configFileThatDeclaredTheme","isMainConfig","rootDir","themeName","resolve","themeDir","dirname","e","pathToLocalTheme","join","localErr","nodeResolutionPaths","module","paths","map","p","panic","id","context","configFilePath","configModule","theme","themeConfig","isFunction","options","processTheme","useLegacyThemes","themesList","__experimentalThemes","plugins","mapSeries","spec","themeObj","then","arr","concat","exports","config","themesA","flattenDeep","reduce","newConfig","themes"],"mappings":"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","sourcesContent":["const path = require(`path`)\nconst mergeGatsbyConfig = require(`../../utils/merge-gatsby-config`)\nconst Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst debug = require(`debug`)(`gatsby:load-themes`)\nconst preferDefault = require(`../prefer-default`)\nimport { getConfigFile } from \"../get-config-file\"\nconst { resolvePlugin } = require(`../load-plugins/load`)\nconst reporter = require(`gatsby-cli/lib/reporter`)\n\n// get the gatsby-config file for a theme\nconst resolveTheme = async (\n  themeSpec,\n  configFileThatDeclaredTheme,\n  isMainConfig = false,\n  rootDir\n) => {\n  const themeName = themeSpec.resolve || themeSpec\n  let themeDir\n  try {\n    // theme is an node-resolvable module\n    themeDir = path.dirname(require.resolve(themeName))\n  } catch (e) {\n    let pathToLocalTheme\n\n    // only try to look for local theme in main site\n    // local themes nested in other themes is potential source of problems:\n    // because those are not hosted by npm, there is potential for multiple\n    // local themes with same name that do different things and name being\n    // main identifier that Gatsby uses right now, it's safer not to support it for now.\n    if (isMainConfig) {\n      pathToLocalTheme = path.join(path.resolve(`.`), `plugins`, themeName)\n      // is a local plugin OR it doesn't exist\n      try {\n        const { resolve } = resolvePlugin(themeName, rootDir)\n        themeDir = resolve\n      } catch (localErr) {\n        // catch shouldn't be empty :shrug:\n      }\n    }\n\n    if (!themeDir) {\n      const nodeResolutionPaths = module.paths.map(p => path.join(p, themeName))\n      reporter.panic({\n        id: `10226`,\n        context: {\n          themeName,\n          configFilePath: configFileThatDeclaredTheme,\n          pathToLocalTheme,\n          nodeResolutionPaths,\n        },\n      })\n    }\n  }\n\n  const { configModule, configFilePath } = await getConfigFile(\n    themeDir,\n    `gatsby-config`\n  )\n  let theme = preferDefault(configModule)\n\n  // if theme is a function, call it with the themeConfig\n  let themeConfig = theme\n  if (_.isFunction(theme)) {\n    themeConfig = theme(themeSpec.options || {})\n  }\n  return { themeName, themeConfig, themeSpec, themeDir, configFilePath }\n}\n\n// single iteration of a recursive function that resolve parent themes\n// It's recursive because we support child themes declaring parents and\n// have to resolve all the way `up the tree` of parent/children relationships\n//\n// Theoretically, there could be an infinite loop here but in practice there is\n// no use case for a loop so I expect that to only happen if someone is very\n// off track and creating their own set of themes\nconst processTheme = (\n  { themeName, themeConfig, themeSpec, themeDir, configFilePath },\n  { useLegacyThemes, rootDir }\n) => {\n  const themesList = useLegacyThemes\n    ? themeConfig && themeConfig.__experimentalThemes\n    : themeConfig && themeConfig.plugins\n  // Gatsby themes don't have to specify a gatsby-config.js (they might only use gatsby-node, etc)\n  // in this case they're technically plugins, but we should support it anyway\n  // because we can't guarantee which files theme creators create first\n  if (themeConfig && themesList) {\n    // for every parent theme a theme defines, resolve the parent's\n    // gatsby config and return it in order [parentA, parentB, child]\n    return Promise.mapSeries(themesList, async spec => {\n      const themeObj = await resolveTheme(spec, configFilePath, false, rootDir)\n      return processTheme(themeObj, { useLegacyThemes, rootDir })\n    }).then(arr =>\n      arr.concat([{ themeName, themeConfig, themeSpec, themeDir }])\n    )\n  } else {\n    // if a theme doesn't define additional themes, return the original theme\n    return [{ themeName, themeConfig, themeSpec, themeDir }]\n  }\n}\n\nmodule.exports = async (\n  config,\n  { useLegacyThemes = false, configFilePath, rootDir }\n) => {\n  const themesA = await Promise.mapSeries(\n    useLegacyThemes ? config.__experimentalThemes || [] : config.plugins || [],\n    async themeSpec => {\n      const themeObj = await resolveTheme(\n        themeSpec,\n        configFilePath,\n        true,\n        rootDir\n      )\n      return processTheme(themeObj, { useLegacyThemes, rootDir })\n    }\n  ).then(arr => _.flattenDeep(arr))\n\n  // log out flattened themes list to aid in debugging\n  debug(themesA)\n\n  // map over each theme, adding the theme itself to the plugins\n  // list in the config for the theme. This enables the usage of\n  // gatsby-node, etc in themes.\n  return (\n    Promise.mapSeries(themesA, ({ themeName, themeConfig = {}, themeSpec }) => {\n      return {\n        ...themeConfig,\n        plugins: [\n          ...(themeConfig.plugins || []),\n          // theme plugin is last so it's gatsby-node, etc can override it's declared plugins, like a normal site.\n          { resolve: themeName, options: themeSpec.options || {} },\n        ],\n      }\n    })\n      /**\n       * themes resolve to a gatsby-config, so here we merge all of the configs\n       * into a single config, making sure to maintain the order in which\n       * they were defined so that later configs, like the user's site and\n       * children, can override functionality in earlier themes.\n       */\n      .reduce(mergeGatsbyConfig, {})\n      .then(newConfig => {\n        return {\n          config: mergeGatsbyConfig(newConfig, config),\n          themes: themesA,\n        }\n      })\n  )\n}\n"],"file":"index.js"}