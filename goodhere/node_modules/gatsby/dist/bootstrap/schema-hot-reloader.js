"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.bootstrapSchemaHotReloader = void 0;

var _lodash = require("lodash");

var _redux = require("../redux");

var _schema = require("../schema");

var _inferenceMetadata = require("../schema/infer/inference-metadata");

var _queryWatcher = require("../query/query-watcher");

var _reporter = _interopRequireDefault(require("gatsby-cli/lib/reporter"));

const inferredTypesChanged = (typeMap, prevTypeMap) => Object.keys(typeMap).some(type => typeMap[type].dirty && !(0, _inferenceMetadata.haveEqualFields)(typeMap[type], prevTypeMap[type]));

const schemaChanged = (schemaCustomization, lastSchemaCustomization) => [`fieldExtensions`, `printConfig`, `thirdPartySchemas`, `types`].some(key => schemaCustomization[key] !== lastSchemaCustomization[key]);

let lastMetadata;
let lastSchemaCustomization; // API_RUNNING_QUEUE_EMPTY could be emitted multiple types
// in a short period of time, so debounce seems reasonable

const maybeRebuildSchema = (0, _lodash.debounce)(async () => {
  const {
    inferenceMetadata,
    schemaCustomization
  } = _redux.store.getState();

  if (!inferredTypesChanged(inferenceMetadata.typeMap, lastMetadata.typeMap) && !schemaChanged(schemaCustomization, lastSchemaCustomization)) {
    return;
  }

  const activity = _reporter.default.activityTimer(`rebuild schema`);

  activity.start();
  lastMetadata = (0, _lodash.cloneDeep)(inferenceMetadata);
  lastSchemaCustomization = schemaCustomization;
  await (0, _schema.rebuild)({
    parentSpan: activity
  });
  await (0, _queryWatcher.updateStateAndRunQueries)(false, {
    parentSpan: activity
  });
  activity.end();
}, 1000);

const bootstrapSchemaHotReloader = () => {
  const {
    inferenceMetadata,
    schemaCustomization
  } = _redux.store.getState();

  lastMetadata = (0, _lodash.cloneDeep)(inferenceMetadata);
  lastSchemaCustomization = schemaCustomization;

  _redux.emitter.on(`API_RUNNING_QUEUE_EMPTY`, maybeRebuildSchema);
};

exports.bootstrapSchemaHotReloader = bootstrapSchemaHotReloader;
//# sourceMappingURL=schema-hot-reloader.js.map