{"version":3,"sources":["../../src/bootstrap/redirects-writer.js"],"names":["lastHash","writeRedirects","bootstrapFinished","program","redirects","store","getState","browserRedirects","filter","r","redirectInBrowser","newHash","crypto","createHash","update","JSON","stringify","digest","fs","writeFile","directory","exports","debouncedWriteRedirects","_","debounce","emitter","on"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAIA,QAAQ,GAAG,IAAf;;AAEA,MAAMC,cAAc,GAAG,YAAY;AACjCC,EAAAA,iBAAiB,GAAG,IAApB;;AAEA,MAAI;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAyBC,aAAMC,QAAN,EAA7B,CAHiC,CAKjC;;;AACA,QAAMC,gBAAgB,GAAGH,SAAS,CAACI,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACC,iBAAxB,CAAzB;;AAEA,QAAMC,OAAO,GAAGC,gBACbC,UADa,CACD,KADC,EAEbC,MAFa,CAENC,IAAI,CAACC,SAAL,CAAeT,gBAAf,CAFM,EAGbU,MAHa,CAGL,KAHK,CAAhB;;AAKA,MAAIN,OAAO,KAAKX,QAAhB,EAA0B;AACxB;AACD;;AAEDA,EAAAA,QAAQ,GAAGW,OAAX;AAEA,QAAMO,iBAAGC,SAAH,CACJ,+BAAShB,OAAO,CAACiB,SAAjB,EAA6B,uBAA7B,CADI,EAEJL,IAAI,CAACC,SAAL,CAAeT,gBAAf,EAAiC,IAAjC,EAAuC,CAAvC,CAFI,CAAN;AAID,CAvBD;;AAyBAc,OAAO,CAACpB,cAAR,GAAyBA,cAAzB;AAEA,IAAIC,iBAAiB,GAAG,KAAxB;;AACA,MAAMoB,uBAAuB,GAAGC,gBAAEC,QAAF,CAAW,MAAM;AAC/C;AACA,MAAItB,iBAAJ,EAAuB;AACrBD,IAAAA,cAAc;AACf;AACF,CAL+B,EAK7B,GAL6B,CAAhC;;AAOAwB,eAAQC,EAAR,CAAY,iBAAZ,EAA8B,MAAM;AAClCJ,EAAAA,uBAAuB;AACxB,CAFD","sourcesContent":["import _ from \"lodash\"\nimport crypto from \"crypto\"\nimport fs from \"fs-extra\"\nimport { store, emitter } from \"../redux/\"\nimport { joinPath } from \"gatsby-core-utils\"\n\nlet lastHash = null\n\nconst writeRedirects = async () => {\n  bootstrapFinished = true\n\n  let { program, redirects } = store.getState()\n\n  // Filter for redirects that are meant for the browser.\n  const browserRedirects = redirects.filter(r => r.redirectInBrowser)\n\n  const newHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(browserRedirects))\n    .digest(`hex`)\n\n  if (newHash === lastHash) {\n    return\n  }\n\n  lastHash = newHash\n\n  await fs.writeFile(\n    joinPath(program.directory, `.cache/redirects.json`),\n    JSON.stringify(browserRedirects, null, 2)\n  )\n}\n\nexports.writeRedirects = writeRedirects\n\nlet bootstrapFinished = false\nconst debouncedWriteRedirects = _.debounce(() => {\n  // Don't write redirects again until bootstrap has finished.\n  if (bootstrapFinished) {\n    writeRedirects()\n  }\n}, 250)\n\nemitter.on(`CREATE_REDIRECT`, () => {\n  debouncedWriteRedirects()\n})\n"],"file":"redirects-writer.js"}