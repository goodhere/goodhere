{"version":3,"sources":["../../src/commands/build-utils.ts"],"names":["getChangedPageDataKeys","state","cachedPageData","pageData","pageKeys","forEach","newPageDataHash","key","has","push","previousPageDataHash","get","pages","keys","collectRemovedPageData","deletedPageKeys","_value","checkAndRemoveEmptyDir","publicDir","pagePath","pageHtmlDirectory","path","dirname","pageDataDirectory","join","hasFiles","fs","readdirSync","length","removeSync","sortedPageKeysByNestedLevel","sort","a","b","currentPagePathValue","split","previousPagePathValue","removePageFiles","removePages","map","removePageData","Promise","all","then"],"mappings":"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","sourcesContent":["import fs from \"fs-extra\"\nimport path from \"path\"\n\nimport {\n  remove as removePageHtmlFile,\n  getPageHtmlFilePath,\n} from \"../utils/page-html\"\nimport { remove as removePageDataFile, fixedPagePath } from \"../utils/page-data\"\nimport { IGatsbyState } from \"../redux/types\"\n\nexport const getChangedPageDataKeys = (\n  state: IGatsbyState,\n  cachedPageData: Map<string, string>\n): string[] => {\n  if (cachedPageData && state.pageData) {\n    const pageKeys: string[] = []\n    state.pageData.forEach((newPageDataHash: string, key: string) => {\n      if (!cachedPageData.has(key)) {\n        pageKeys.push(key)\n      } else {\n        const previousPageDataHash = cachedPageData.get(key)\n        if (newPageDataHash !== previousPageDataHash) {\n          pageKeys.push(key)\n        }\n      }\n    })\n    return pageKeys\n  }\n\n  return [...state.pages.keys()]\n}\n\nexport const collectRemovedPageData = (\n  state: IGatsbyState,\n  cachedPageData: Map<string, string>\n): string[] => {\n  if (cachedPageData && state.pageData) {\n    const deletedPageKeys: string[] = []\n    cachedPageData.forEach((_value: string, key: string) => {\n      if (!state.pageData.has(key)) {\n        deletedPageKeys.push(key)\n      }\n    })\n    return deletedPageKeys\n  }\n  return []\n}\n\nconst checkAndRemoveEmptyDir = (publicDir: string, pagePath: string): void => {\n  const pageHtmlDirectory = path.dirname(\n    getPageHtmlFilePath(publicDir, pagePath)\n  )\n  const pageDataDirectory = path.join(\n    publicDir,\n    `page-data`,\n    fixedPagePath(pagePath)\n  )\n  const hasFiles = fs.readdirSync(pageHtmlDirectory)\n\n  // if page's html folder is empty also remove matching page-data folder\n  if (!hasFiles.length) {\n    fs.removeSync(pageHtmlDirectory)\n    fs.removeSync(pageDataDirectory)\n  }\n}\n\nconst sortedPageKeysByNestedLevel = (pageKeys: string[]): string[] =>\n  pageKeys.sort((a, b) => {\n    const currentPagePathValue = a.split(`/`).length\n    const previousPagePathValue = b.split(`/`).length\n    return previousPagePathValue - currentPagePathValue\n  })\n\nexport const removePageFiles = async (\n  publicDir: string,\n  pageKeys: string[]\n): Promise<void> => {\n  const removePages = pageKeys.map(pagePath =>\n    removePageHtmlFile({ publicDir }, pagePath)\n  )\n\n  const removePageData = pageKeys.map(pagePath =>\n    removePageDataFile({ publicDir }, pagePath)\n  )\n\n  return Promise.all([...removePages, ...removePageData]).then(() => {\n    // Sort removed pageKeys by nested directories and remove if empty.\n    sortedPageKeysByNestedLevel(pageKeys).forEach(pagePath => {\n      checkAndRemoveEmptyDir(publicDir, pagePath)\n    })\n  })\n}\n"],"file":"build-utils.js"}