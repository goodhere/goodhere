{"version":3,"sources":["../../src/commands/serve.ts"],"names":["telemetry","trackCli","readMatchPaths","program","filePath","path","join","directory","rawJSON","fs","readFile","error","report","warn","chalk","bold","JSON","parse","matchPathRouter","matchPaths","options","req","res","next","url","accepts","matchPath","find","sendFile","err","module","exports","startBackgroundUpdate","prefixPaths","port","open","host","parseInt","configModule","config","pathPrefix","configPathPrefix","root","app","router","express","Router","use","expressMiddleware","static","status","_","header","startListening","listen","openUrlString","info","Promise","resolve","catch","e","message"],"mappings":"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","sourcesContent":["import path from \"path\"\nimport openurl from \"better-opn\"\nimport fs from \"fs-extra\"\nimport compression from \"compression\"\nimport express from \"express\"\nimport chalk from \"chalk\"\nimport { match as reachMatch } from \"@reach/router/lib/utils\"\nimport onExit from \"signal-exit\"\nimport report from \"gatsby-cli/lib/reporter\"\n\nimport telemetry from \"gatsby-telemetry\"\n\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport { getConfigFile } from \"../bootstrap/get-config-file\"\nimport preferDefault from \"../bootstrap/prefer-default\"\nimport { IProgram } from \"./types\"\n\ninterface IMatchPath {\n  path: string\n  matchPath: string\n}\n\ninterface IServeProgram extends IProgram {\n  prefixPaths: boolean\n}\n\nonExit(() => {\n  telemetry.trackCli(`SERVE_STOP`)\n})\n\nconst readMatchPaths = async (\n  program: IServeProgram\n): Promise<IMatchPath[]> => {\n  const filePath = path.join(program.directory, `.cache`, `match-paths.json`)\n  let rawJSON = `[]`\n  try {\n    rawJSON = await fs.readFile(filePath, `utf8`)\n  } catch (error) {\n    report.warn(error)\n    report.warn(\n      `Could not read ${chalk.bold(\n        `match-paths.json`\n      )} from the .cache directory`\n    )\n    report.warn(\n      `Client-side routing will not work correctly. Maybe you need to re-run ${chalk.bold(\n        `gatsby build`\n      )}?`\n    )\n  }\n  return JSON.parse(rawJSON) as IMatchPath[]\n}\n\nconst matchPathRouter = (\n  matchPaths: IMatchPath[],\n  options: {\n    root: string\n  }\n) => (\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction\n): void => {\n  const { url } = req\n  if (req.accepts(`html`)) {\n    const matchPath = matchPaths.find(\n      ({ matchPath }) => reachMatch(matchPath, url) !== null\n    )\n    if (matchPath) {\n      return res.sendFile(\n        path.join(matchPath.path, `index.html`),\n        options,\n        err => {\n          if (err) {\n            next()\n          }\n        }\n      )\n    }\n  }\n  return next()\n}\n\nmodule.exports = async (program: IServeProgram): Promise<void> => {\n  telemetry.trackCli(`SERVE_START`)\n  telemetry.startBackgroundUpdate()\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const { configModule } = await getConfigFile(\n    program.directory,\n    `gatsby-config`\n  )\n  const config = preferDefault(configModule)\n\n  const { pathPrefix: configPathPrefix } = config || {}\n\n  const pathPrefix = prefixPaths && configPathPrefix ? configPathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n\n  const app = express()\n  const router = express.Router()\n\n  app.use(telemetry.expressMiddleware(`SERVE`))\n\n  router.use(compression())\n  router.use(express.static(`public`))\n  const matchPaths = await readMatchPaths(program)\n  router.use(matchPathRouter(matchPaths, { root }))\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      return res.status(404).sendFile(`404.html`, { root })\n    }\n    return next()\n  })\n  app.use(function(\n    _: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) {\n    res.header(`Access-Control-Allow-Origin`, `*`)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n  app.use(pathPrefix, router)\n\n  const startListening = (): void => {\n    app.listen(port, host, () => {\n      const openUrlString = `http://${host}:${port}${pathPrefix}`\n      report.info(`gatsby serve running at: ${chalk.bold(openUrlString)}`)\n      if (open) {\n        report.info(`Opening browser...`)\n        Promise.resolve(openurl(openUrlString)).catch(() =>\n          report.warn(`Browser not opened because no browser was found`)\n        )\n      }\n    })\n  }\n\n  try {\n    port = await detectPortInUseAndPrompt(port)\n    startListening()\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      return\n    }\n\n    throw e\n  }\n}\n"],"file":"serve.js"}