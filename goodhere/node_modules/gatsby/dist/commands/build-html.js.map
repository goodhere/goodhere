{"version":3,"sources":["../../src/commands/build-html.ts"],"names":["runWebpack","compilerConfig","Bluebird","resolve","reject","run","err","stats","doBuildRenderer","directory","webpackConfig","hasErrors","reporter","panic","compilation","errors","buildRenderer","program","stage","parentSpan","config","deleteRenderer","rendererPath","fs","remove","e","renderHTMLQueue","workerPool","activity","htmlComponentRendererPath","pages","envVars","process","env","NODE_ENV","gatsby_executing_command","gatsby_log_level","segments","map","pageSegment","renderHTML","paths","tick","length","doBuildPages","pagePaths","telemetry","addSiteMeasurement","pagesCount","error","prettyError","stack","context","buildHTML","span"],"mappings":"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","sourcesContent":["import Bluebird from \"bluebird\"\nimport fs from \"fs-extra\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { createErrorFromString } from \"gatsby-cli/lib/reporter/errors\"\nimport telemetry from \"gatsby-telemetry\"\nimport { chunk } from \"lodash\"\nimport webpack from \"webpack\"\n\nimport webpackConfig from \"../utils/webpack.config\"\nimport { structureWebpackErrors } from \"../utils/webpack-error-utils\"\n\nimport { BuildHTMLStage, IProgram } from \"./types\"\n\ntype IActivity = any // TODO\ntype IWorkerPool = any // TODO\n\nconst runWebpack = (compilerConfig): Bluebird<webpack.Stats> =>\n  new Bluebird((resolve, reject) => {\n    webpack(compilerConfig).run((err, stats) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(stats)\n      }\n    })\n  })\n\nconst doBuildRenderer = async (\n  { directory }: IProgram,\n  webpackConfig: webpack.Configuration\n): Promise<string> => {\n  const stats = await runWebpack(webpackConfig)\n  if (stats.hasErrors()) {\n    reporter.panic(\n      structureWebpackErrors(`build-html`, stats.compilation.errors)\n    )\n  }\n\n  // render-page.js is hard coded in webpack.config\n  return `${directory}/public/render-page.js`\n}\n\nconst buildRenderer = async (\n  program: IProgram,\n  stage: BuildHTMLStage,\n  parentSpan: IActivity\n): Promise<string> => {\n  const { directory } = program\n  const config = await webpackConfig(program, directory, stage, null, {\n    parentSpan,\n  })\n\n  return doBuildRenderer(program, config)\n}\n\nconst deleteRenderer = async (rendererPath: string): Promise<void> => {\n  try {\n    await fs.remove(rendererPath)\n    await fs.remove(`${rendererPath}.map`)\n  } catch (e) {\n    // This function will fail on Windows with no further consequences.\n  }\n}\n\nconst renderHTMLQueue = async (\n  workerPool: IWorkerPool,\n  activity: IActivity,\n  htmlComponentRendererPath: string,\n  pages: string[]\n): Promise<void> => {\n  // We need to only pass env vars that are set programmatically in gatsby-cli\n  // to child process. Other vars will be picked up from environment.\n  const envVars = [\n    [`NODE_ENV`, process.env.NODE_ENV],\n    [`gatsby_executing_command`, process.env.gatsby_executing_command],\n    [`gatsby_log_level`, process.env.gatsby_log_level],\n  ]\n\n  // const start = process.hrtime()\n  const segments = chunk(pages, 50)\n\n  await Bluebird.map(segments, async pageSegment => {\n    await workerPool.renderHTML({\n      envVars,\n      htmlComponentRendererPath,\n      paths: pageSegment,\n    })\n\n    if (activity && activity.tick) {\n      activity.tick(pageSegment.length)\n    }\n  })\n}\n\nconst doBuildPages = async (\n  rendererPath: string,\n  pagePaths: string[],\n  activity: IActivity,\n  workerPool: IWorkerPool\n): Promise<void> => {\n  telemetry.addSiteMeasurement(`BUILD_END`, {\n    pagesCount: pagePaths.length,\n  })\n\n  try {\n    await renderHTMLQueue(workerPool, activity, rendererPath, pagePaths)\n  } catch (error) {\n    const prettyError = await createErrorFromString(\n      error.stack,\n      `${rendererPath}.map`\n    )\n    prettyError.context = error.context\n    throw prettyError\n  }\n}\n\nexport const buildHTML = async ({\n  program,\n  stage,\n  pagePaths,\n  activity,\n  workerPool,\n}: {\n  program: IProgram\n  stage: BuildHTMLStage\n  pagePaths: string[]\n  activity: IActivity\n  workerPool: IWorkerPool\n}): Promise<void> => {\n  const rendererPath = await buildRenderer(program, stage, activity.span)\n  await doBuildPages(rendererPath, pagePaths, activity, workerPool)\n  await deleteRenderer(rendererPath)\n}\n"],"file":"build-html.js"}