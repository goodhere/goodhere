{"version":3,"sources":["../../../src/db/loki/nodes-query.js"],"names":["_","require","GraphQLList","getNullableType","getNamedType","isCompositeType","prepareRegex","getNodeTypeCollection","ensureFieldIndexes","getNode","getNodesByType","toDottedFields","objectToDottedField","liftResolvedFields","runSiftOnNodes","toMongoArgs","gqlFilter","lastFieldType","mongoArgs","each","v","k","isPlainObject","gqlFieldType","getFields","type","re","obj","isUndefined","test","Minimatch","mm","makeRe","undefined","name","concat","isNeTrue","path","length","first","rest","fixNeTrue","filter","Object","keys","reduce","acc","key","value","split","convertArgs","gqlArgs","gqlType","resolvedFields","toSortFields","sortArgs","fields","order","lokiSortFields","i","dottedField","isDesc","toLowerCase","push","doesSortFieldsHaveArray","some","field","gqlField","namedType","join","runQuery","args","nodeTypeNames","nodes","typeName","queryArgs","firstOnly","lokiArgs","sortFields","sort","table","chain","simplesort","find","sortFieldsHaveArray","dottedFields","dottedFieldKeys","map","startsWith","sortFieldAccessors","sortFieldOrder","orderBy","data","compoundsort","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst {\n  GraphQLList,\n  getNullableType,\n  getNamedType,\n  isCompositeType,\n} = require(`graphql`)\nconst { prepareRegex } = require(`../../utils/prepare-regex`)\nconst {\n  getNodeTypeCollection,\n  ensureFieldIndexes,\n  getNode,\n  getNodesByType,\n} = require(`./nodes`)\nconst {\n  toDottedFields,\n  objectToDottedField,\n  liftResolvedFields,\n} = require(`../common/query`)\nimport { getValueAt } from \"../../utils/get-value-at\"\nconst { runSiftOnNodes } = require(`../../redux/run-sift`)\n\n// Takes a raw graphql filter and converts it into a mongo-like args\n// object that can be understood by loki. E.g. `eq` becomes\n// `$eq`. gqlFilter should be the raw graphql filter returned from\n// graphql-js. e.g. gqlFilter:\n//\n// {\n//   internal: {\n//     type: {\n//       eq: \"TestNode\"\n//     },\n//     content: {\n//       glob: \"et\"\n//     }\n//   },\n//   id: {\n//     glob: \"12*\"\n//   }\n// }\n//\n// would return\n//\n// {\n//   internal: {\n//     type: {\n//       $eq: \"TestNode\"  // append $ to eq\n//     },\n//     content: {\n//       $regex: new MiniMatch(v) // convert glob to regex\n//     }\n//   },\n//   id: {\n//     $regex: // as above\n//   }\n// }\nfunction toMongoArgs(gqlFilter, lastFieldType) {\n  lastFieldType = getNullableType(lastFieldType)\n  const mongoArgs = {}\n  _.each(gqlFilter, (v, k) => {\n    if (_.isPlainObject(v)) {\n      if (k === `elemMatch`) {\n        mongoArgs[`$elemMatch`] = toMongoArgs(v, getNamedType(lastFieldType))\n      } else if (lastFieldType instanceof GraphQLList) {\n        mongoArgs[`$elemMatch`] = {\n          [k]: toMongoArgs(v, getNamedType(lastFieldType)),\n        }\n      } else {\n        const gqlFieldType = lastFieldType.getFields()[k].type\n        mongoArgs[k] = toMongoArgs(v, gqlFieldType)\n      }\n    } else {\n      if (k === `regex`) {\n        const re = prepareRegex(v)\n        // To ensure that false is returned if a field doesn't\n        // exist. E.g. `{nested.field: {$regex: /.*/}}`\n        mongoArgs[`$where`] = obj => !_.isUndefined(obj) && re.test(obj)\n      } else if (k === `glob`) {\n        const Minimatch = require(`minimatch`).Minimatch\n        const mm = new Minimatch(v)\n        mongoArgs[`$regex`] = mm.makeRe()\n      } else if (k === `eq` && v === null) {\n        mongoArgs[`$in`] = [null, undefined]\n      } else if (\n        k === `eq` &&\n        lastFieldType &&\n        lastFieldType instanceof GraphQLList\n      ) {\n        mongoArgs[`$contains`] = v\n      } else if (\n        k === `ne` &&\n        lastFieldType &&\n        lastFieldType instanceof GraphQLList\n      ) {\n        mongoArgs[`$containsNone`] = v\n      } else if (\n        k === `in` &&\n        lastFieldType &&\n        lastFieldType instanceof GraphQLList\n      ) {\n        mongoArgs[`$containsAny`] = v\n      } else if (\n        k === `nin` &&\n        lastFieldType &&\n        lastFieldType instanceof GraphQLList\n      ) {\n        mongoArgs[`$containsNone`] = v\n      } else if (k === `ne` && v === null) {\n        mongoArgs[`$ne`] = undefined\n      } else if (k === `nin` && lastFieldType.name === `Boolean`) {\n        mongoArgs[`$nin`] = v.concat([undefined])\n      } else {\n        mongoArgs[`$${k}`] = v\n      }\n    }\n  })\n  return mongoArgs\n}\n\n// The query language that Gatsby has used since day 1 is `sift`. Both\n// sift and loki are mongo-like query languages, but they have some\n// subtle differences. One is that in sift, a nested filter such as\n// `{foo: {bar: {ne: true} } }` will return true if the foo field\n// doesn't exist, is null, or bar is null. Whereas loki will return\n// false if the foo field doesn't exist or is null. This ensures that\n// loki queries behave like sift\nconst isNeTrue = (obj, path) => {\n  if (path.length) {\n    const [first, ...rest] = path\n    return obj == null || obj[first] == null || isNeTrue(obj[first], rest)\n  } else {\n    return obj !== true\n  }\n}\n\nconst fixNeTrue = filter =>\n  Object.keys(filter).reduce((acc, key) => {\n    const value = filter[key]\n    if (value[`$ne`] === true) {\n      const [first, ...path] = key.split(`.`)\n      acc[first] = { [`$where`]: obj => isNeTrue(obj, path) }\n    } else {\n      acc[key] = value\n    }\n    return acc\n  }, {})\n\n// Converts graphQL args to a loki filter\nconst convertArgs = (gqlArgs, gqlType, resolvedFields) =>\n  liftResolvedFields(\n    fixNeTrue(toDottedFields(toMongoArgs(gqlArgs.filter, gqlType))),\n    resolvedFields\n  )\n\n// Converts graphql Sort args into the form expected by loki, which is\n// a vector where the first value is a field name, and the second is a\n// boolean `isDesc`. E.g\n//\n// {\n//   fields: [ `frontmatter___date`, `id` ],\n//   order: [`desc`]\n// }\n//\n// would return\n//\n// [ [ `frontmatter.date`, true ], [ `id`, false ] ]\n//\nfunction toSortFields(sortArgs) {\n  const { fields, order } = sortArgs\n  const lokiSortFields = []\n  for (let i = 0; i < fields.length; i++) {\n    const dottedField = fields[i]\n    const isDesc = order[i] && order[i].toLowerCase() === `desc`\n    lokiSortFields.push([dottedField, isDesc])\n  }\n  return lokiSortFields\n}\n\nfunction doesSortFieldsHaveArray(type, sortArgs) {\n  return sortArgs.some(([fields, _]) => {\n    const [field, ...rest] = fields.split(`.`)\n    const gqlField = type.getFields()[field]\n    if (gqlField) {\n      const type = getNullableType(gqlField.type)\n      if (type instanceof GraphQLList) {\n        return true\n      } else {\n        const namedType = getNamedType(type)\n        if (isCompositeType(namedType) && rest.length > 0) {\n          return doesSortFieldsHaveArray(namedType, [[rest.join(`.`), false]])\n        }\n      }\n    }\n    return false\n  })\n}\n\n/**\n * Runs the graphql query over the loki nodes db.\n *\n * @param {Object} args. Object with:\n *\n * {Object} gqlType: A GraphQL type\n *\n * {Object} queryArgs: The raw graphql query as a js object. E.g. `{\n * filter: { fields { slug: { eq: \"/somepath\" } } } }`\n *\n * {Object} context: The context from the QueryJob\n *\n * {boolean} firstOnly: Whether to return the first found match, or\n * all matching results\n *\n * @returns {promise} A promise that will eventually be resolved with\n * a collection of matching objects (even if `firstOnly` is true)\n */\nasync function runQuery(args) {\n  if (args.nodeTypeNames.length > 1) {\n    const nodes = args.nodeTypeNames.reduce((acc, typeName) => {\n      acc.push(...getNodesByType(typeName))\n      return acc\n    }, [])\n    return runSiftOnNodes(nodes, args, getNode)\n  }\n\n  const {\n    gqlType,\n    queryArgs,\n    firstOnly,\n    resolvedFields = {},\n    nodeTypeNames,\n  } = args\n  const lokiArgs = convertArgs(queryArgs, gqlType, resolvedFields)\n\n  let sortFields\n  if (queryArgs.sort) {\n    sortFields = toSortFields(queryArgs.sort)\n  }\n  const table = getNodeTypeCollection(nodeTypeNames[0])\n  if (!table) {\n    return []\n  }\n  const chain = table.chain()\n  chain.simplesort(`internal.counter`)\n  ensureFieldIndexes(nodeTypeNames[0], lokiArgs, sortFields || [])\n\n  chain.find(lokiArgs, firstOnly)\n\n  if (sortFields) {\n    // Loki is unable to sort arrays, so we fall back to lodash for that\n    const sortFieldsHaveArray = doesSortFieldsHaveArray(gqlType, sortFields)\n    const dottedFields = objectToDottedField(resolvedFields)\n    const dottedFieldKeys = Object.keys(dottedFields)\n    sortFields = sortFields.map(([field, order]) => {\n      if (\n        dottedFields[field] ||\n        dottedFieldKeys.some(key => field.startsWith(key))\n      ) {\n        return [`__gatsby_resolved.${field}`, order]\n      } else {\n        return [field, order]\n      }\n    })\n\n    if (sortFieldsHaveArray) {\n      const sortFieldAccessors = sortFields.map(([field, _]) => v =>\n        getValueAt(v, field)\n      )\n      const sortFieldOrder = sortFields.map(([_, order]) =>\n        order ? `desc` : `asc`\n      )\n      return _.orderBy(chain.data(), sortFieldAccessors, sortFieldOrder)\n    } else {\n      return chain.compoundsort(sortFields).data()\n    }\n  } else {\n    return chain.data()\n  }\n}\n\nmodule.exports = runQuery\n"],"file":"nodes-query.js"}