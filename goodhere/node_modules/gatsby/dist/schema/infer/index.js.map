{"version":3,"sources":["../../../src/schema/infer/index.js"],"names":["report","require","ObjectTypeComposer","hasNodes","getExampleObject","addNodeInterface","addInferredFields","addInferredTypes","schemaComposer","nodeStore","typeConflictReporter","typeMapping","inferenceMetadata","parentSpan","typeMap","typesWithNodes","Object","keys","filter","typeName","typeNames","putFileFirst","noNodeInterfaceTypes","typesToInfer","forEach","typeComposer","has","getOTC","runInfer","hasExtension","getExtension","hasInterface","push","create","setExtension","length","warn","panic","map","addInferredType","getTypeName","nodes","getNodesByType","internal","owner","exampleValue","index","indexOf","slice","module","exports"],"mappings":"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","sourcesContent":["const report = require(`gatsby-cli/lib/reporter`)\nconst { ObjectTypeComposer } = require(`graphql-compose`)\nconst { hasNodes } = require(`./inference-metadata`)\nconst { getExampleObject } = require(`./build-example-data`)\nconst { addNodeInterface } = require(`../types/node-interface`)\nconst { addInferredFields } = require(`./add-inferred-fields`)\n\nconst addInferredTypes = ({\n  schemaComposer,\n  nodeStore,\n  typeConflictReporter,\n  typeMapping,\n  inferenceMetadata,\n  parentSpan,\n}) => {\n  // XXX(freiksenet): Won't be needed after plugins set typedefs\n  // Infer File first so all the links to it would work\n  const { typeMap } = inferenceMetadata\n  const typesWithNodes = Object.keys(typeMap).filter(typeName =>\n    hasNodes(typeMap[typeName])\n  )\n  const typeNames = putFileFirst(typesWithNodes)\n  const noNodeInterfaceTypes = []\n\n  const typesToInfer = []\n\n  typeNames.forEach(typeName => {\n    let typeComposer\n    if (schemaComposer.has(typeName)) {\n      typeComposer = schemaComposer.getOTC(typeName)\n      // Infer if we have enabled \"@infer\" or if it's \"@dontInfer\" but we\n      // have \"addDefaultResolvers: true\"\n      const runInfer = typeComposer.hasExtension(`infer`)\n        ? typeComposer.getExtension(`infer`) ||\n          typeComposer.getExtension(`addDefaultResolvers`)\n        : true\n      if (runInfer) {\n        if (!typeComposer.hasInterface(`Node`)) {\n          noNodeInterfaceTypes.push(typeName)\n        }\n        typesToInfer.push(typeComposer)\n      }\n    } else {\n      typeComposer = ObjectTypeComposer.create(typeName, schemaComposer)\n      addNodeInterface({ schemaComposer, typeComposer })\n      typeComposer.setExtension(`createdFrom`, `inference`)\n      typesToInfer.push(typeComposer)\n    }\n  })\n\n  if (noNodeInterfaceTypes.length > 0) {\n    noNodeInterfaceTypes.forEach(typeName => {\n      report.warn(\n        `Type \\`${typeName}\\` declared in \\`createTypes\\` looks like a node, ` +\n          `but doesn't implement a \\`Node\\` interface. It's likely that you should ` +\n          `add the \\`Node\\` interface to your type def:\\n\\n` +\n          `\\`type ${typeName} implements Node { ... }\\`\\n\\n` +\n          `If you know that you don't want it to be a node (which would mean no ` +\n          `root queries to retrieve it), you can explicitly disable inference ` +\n          `for it:\\n\\n` +\n          `\\`type ${typeName} @dontInfer { ... }\\``\n      )\n    })\n    report.panic(`Building schema failed`)\n  }\n\n  return typesToInfer.map(typeComposer =>\n    addInferredType({\n      schemaComposer,\n      typeComposer,\n      nodeStore,\n      typeConflictReporter,\n      typeMapping,\n      parentSpan,\n      inferenceMetadata,\n    })\n  )\n}\n\nconst addInferredType = ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n  typeConflictReporter,\n  typeMapping,\n  inferenceMetadata = {},\n  parentSpan,\n}) => {\n  const typeName = typeComposer.getTypeName()\n  // TODO: Move this to where the type is created once we can get\n  // node type owner information directly from store\n  if (\n    typeComposer.getExtension(`createdFrom`) === `inference` &&\n    hasNodes(inferenceMetadata.typeMap[typeName])\n  ) {\n    const nodes = nodeStore.getNodesByType(typeName)\n    typeComposer.setExtension(`plugin`, nodes[0].internal.owner)\n  }\n\n  const exampleValue = getExampleObject({\n    ...inferenceMetadata.typeMap[typeName],\n    typeName,\n    typeConflictReporter,\n  })\n\n  addInferredFields({\n    schemaComposer,\n    typeComposer,\n    nodeStore,\n    exampleValue,\n    typeMapping,\n    parentSpan,\n  })\n  return typeComposer\n}\n\nconst putFileFirst = typeNames => {\n  const index = typeNames.indexOf(`File`)\n  if (index !== -1) {\n    return [`File`, ...typeNames.slice(0, index), ...typeNames.slice(index + 1)]\n  } else {\n    return typeNames\n  }\n}\n\nmodule.exports = {\n  addInferredType,\n  addInferredTypes,\n}\n"],"file":"index.js"}