{"version":3,"sources":["../../../src/schema/infer/build-example-data.js"],"names":["groupBy","require","getExampleObject","fieldMap","typeName","typeConflictReporter","Object","keys","reduce","acc","key","value","buildExampleValue","path","descriptor","isArrayItem","type","conflicts","resolveWinnerType","addConflict","prepareConflictExamples","typeInfo","isMixOfDateAndString","hasOnlyEmptyStrings","example","item","exampleItemValue","nodes","multiple","linkedNodes","filter","dprops","hasKeys","result","forEach","prop","candidates","possibleTypes","length","isMixedNumber","typeNameMapper","includes","reportedValueMapper","relatedNode","find","relatedNodeList","object","itemValue","array","undefined","conflictingTypes","groups","first","map","nodeId","join","float","int","total","date","string","empty"],"mappings":"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","sourcesContent":["const { groupBy } = require(`lodash`)\n\n// See gatsby/src/schema/infer/inference-metadata.js for the ValueDescriptor structs (-> typeInfo)\n\nconst getExampleObject = ({ fieldMap = {}, typeName, typeConflictReporter }) =>\n  Object.keys(fieldMap).reduce((acc, key) => {\n    const value = buildExampleValue({\n      path: `${typeName}.${key}`,\n      descriptor: fieldMap[key],\n      typeConflictReporter,\n    })\n    if (key && value !== null) {\n      acc[key] = value\n    }\n    return acc\n  }, {})\n\nconst buildExampleValue = ({\n  descriptor,\n  typeConflictReporter,\n  isArrayItem = false,\n  path = ``,\n}) => {\n  const [type, conflicts = false] = resolveWinnerType(descriptor)\n\n  if (conflicts && typeConflictReporter) {\n    typeConflictReporter.addConflict(\n      path,\n      prepareConflictExamples(descriptor, isArrayItem)\n    )\n  }\n\n  const typeInfo = descriptor[type]\n\n  switch (type) {\n    case `null`:\n      return null\n\n    case `date`:\n    case `string`: {\n      if (isMixOfDateAndString(descriptor)) {\n        return hasOnlyEmptyStrings(descriptor) ? `1978-09-26` : `String`\n      }\n      return typeInfo.example\n    }\n\n    case `array`: {\n      const { item } = typeInfo\n      const exampleItemValue = item\n        ? buildExampleValue({\n            descriptor: item,\n            isArrayItem: true,\n            typeConflictReporter,\n            path,\n          })\n        : null\n      return exampleItemValue === null ? null : [exampleItemValue]\n    }\n\n    case `relatedNode`:\n    case `relatedNodeList`: {\n      const { nodes = {} } = typeInfo\n      return {\n        multiple: type === `relatedNodeList`,\n        linkedNodes: Object.keys(nodes).filter(key => nodes[key] > 0),\n      }\n    }\n\n    case `object`: {\n      const { dprops } = typeInfo\n      let hasKeys = false\n      const result = {}\n      Object.keys(dprops).forEach(prop => {\n        const value = buildExampleValue({\n          descriptor: dprops[prop],\n          typeConflictReporter,\n          path: `${path}.${prop}`,\n        })\n        if (value !== null) {\n          hasKeys = true\n          result[prop] = value\n        }\n      })\n      return hasKeys ? result : null\n    }\n\n    default:\n      return typeInfo.example\n  }\n}\n\nconst resolveWinnerType = descriptor => {\n  const candidates = possibleTypes(descriptor)\n  if (candidates.length === 1) {\n    return [candidates[0]]\n  }\n  if (candidates.length === 2 && isMixedNumber(descriptor)) {\n    return [`float`]\n  }\n  if (candidates.length === 2 && isMixOfDateAndString(descriptor)) {\n    return [hasOnlyEmptyStrings(descriptor) ? `date` : `string`]\n  }\n  if (candidates.length > 1) {\n    return [`null`, true]\n  }\n  return [`null`]\n}\n\nconst prepareConflictExamples = (descriptor, isArrayItem) => {\n  const typeNameMapper = typeName => {\n    if (typeName === `relatedNode`) {\n      return `string`\n    }\n    if (typeName === `relatedNodeList`) {\n      return `[string]`\n    }\n    return [`float`, `int`].includes(typeName) ? `number` : typeName\n  }\n  const reportedValueMapper = typeName => {\n    if (typeName === `relatedNode`) {\n      const { nodes } = descriptor.relatedNode\n      return Object.keys(nodes).find(key => nodes[key] > 0)\n    }\n    if (typeName === `relatedNodeList`) {\n      const { nodes } = descriptor.relatedNodeList\n      return Object.keys(nodes).filter(key => nodes[key] > 0)\n    }\n    if (typeName === `object`) {\n      return getExampleObject({ typeName, fieldMap: descriptor.object.dprops })\n    }\n    if (typeName === `array`) {\n      const itemValue = buildExampleValue({\n        descriptor: descriptor.array.item,\n        isArrayItem: true,\n      })\n      return itemValue === null || itemValue === undefined ? [] : [itemValue]\n    }\n    return descriptor[typeName].example\n  }\n  const conflictingTypes = possibleTypes(descriptor)\n\n  if (isArrayItem) {\n    // Differentiate conflict examples by node they were first seen in.\n    // See Caveats section in the header of this file\n    const groups = groupBy(\n      conflictingTypes,\n      type => descriptor[type].first || ``\n    )\n    return Object.keys(groups).map(nodeId => {\n      return {\n        type: `[${groups[nodeId].map(typeNameMapper).join(`,`)}]`,\n        value: groups[nodeId].map(reportedValueMapper),\n      }\n    })\n  }\n\n  return conflictingTypes.map(type => {\n    return {\n      type: typeNameMapper(type),\n      value: reportedValueMapper(type),\n    }\n  })\n}\n\nconst isMixedNumber = ({ float, int }) =>\n  float && float.total > 0 && int && int.total > 0\n\nconst isMixOfDateAndString = ({ date, string }) =>\n  date && date.total > 0 && string && string.total > 0\n\nconst hasOnlyEmptyStrings = ({ string }) =>\n  string && string.empty === string.total\n\nconst possibleTypes = (descriptor = {}) =>\n  Object.keys(descriptor).filter(type => descriptor[type].total > 0)\n\nexport { getExampleObject }\n"],"file":"build-example-data.js"}