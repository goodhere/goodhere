{"version":3,"sources":["../../../src/schema/infer/type-conflict-reporter.js"],"names":["_","require","report","typeOf","util","isNodeWithDescription","node","internal","description","findNodeDescription","obj","formatValue","value","isArray","inspect","colors","depth","breakLength","Infinity","output","length","push","wasElipsisLast","usedTypes","forEach","item","type","includes","join","TypeConflictEntry","constructor","selector","types","Map","addExample","parent","set","printEntry","sortedByTypeName","sortBy","Array","from","entries","typeName","log","map","TypeConflictReporter","clearConflicts","clear","getEntryFromSelector","dataEntry","get","addConflict","examples","substring","entry","filter","example","printConflicts","size","warn","getConflicts","values","module","exports"],"mappings":"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","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst typeOf = require(`type-of`)\nconst util = require(`util`)\n\nexport type TypeConflictExample = {\n  value: mixed,\n  parent: {},\n  type: string,\n  arrayTypes: string[],\n}\n\ntype TypeConflict = {\n  value: mixed,\n  description: string,\n}\n\nconst isNodeWithDescription = node =>\n  node && node.internal && node.internal.description\n\nconst findNodeDescription = obj => {\n  if (obj) {\n    // TODO: Maybe get this back\n    // const node = findRootNodeAncestor(obj, isNodeWithDescription)\n    if (isNodeWithDescription(obj)) {\n      return obj.internal.description\n    }\n  }\n  return ``\n}\n\nconst formatValue = value => {\n  if (!_.isArray(value)) {\n    return util.inspect(value, {\n      colors: true,\n      depth: 0,\n      breakLength: Infinity,\n    })\n  }\n\n  const output = []\n\n  if (value.length === 1) {\n    // For arrays usually a single conflicting item is exposed vs. the whole array\n    output.push(`...`)\n    output.push(formatValue(value[0]))\n    output.push(`...`)\n  } else {\n    let wasElipsisLast = false\n    const usedTypes = []\n    value.forEach(item => {\n      const type = typeOf(item)\n      if (usedTypes.includes(type)) {\n        if (!wasElipsisLast) {\n          output.push(`...`)\n          wasElipsisLast = true\n        }\n      } else {\n        output.push(formatValue(item))\n        wasElipsisLast = false\n        usedTypes.push(type)\n      }\n    })\n  }\n\n  return `[ ${output.join(`, `)} ]`\n}\n\nclass TypeConflictEntry {\n  selector: string\n  types: Map<string, TypeConflict>\n\n  constructor(selector: string) {\n    this.selector = selector\n    this.types = new Map()\n  }\n\n  addExample({ value, type, parent }: TypeConflictExample) {\n    this.types.set(type, {\n      value,\n      description: findNodeDescription(parent),\n    })\n  }\n\n  printEntry() {\n    const sortedByTypeName = _.sortBy(\n      Array.from(this.types.entries()),\n      ([typeName, value]) => typeName\n    )\n\n    report.log(\n      `${this.selector}:${sortedByTypeName\n        .map(\n          ([typeName, { value, description }]) =>\n            `\\n - type: ${typeName}\\n   value: ${formatValue(\n              value\n            )}${description && `\\n   source: ${description}`}`\n        )\n        .join(``)}`\n    )\n  }\n}\n\nclass TypeConflictReporter {\n  entries: Map<string, TypeConflictEntry>\n\n  constructor() {\n    this.entries = new Map()\n  }\n\n  clearConflicts() {\n    this.entries.clear()\n  }\n\n  getEntryFromSelector(selector: string): TypeConflictEntry {\n    let dataEntry = this.entries.get(selector)\n\n    if (!dataEntry) {\n      dataEntry = new TypeConflictEntry(selector)\n      this.entries.set(selector, dataEntry)\n    }\n\n    return dataEntry\n  }\n\n  addConflict(selector: string, examples: TypeConflictExample[]) {\n    if (selector.substring(0, 11) === `SitePlugin.`) {\n      // Don't store and print out type conflicts in plugins.\n      // This is out of user control so he/she can't do anything\n      // to hide those.\n      return\n    }\n\n    const entry = this.getEntryFromSelector(selector)\n    examples\n      .filter(example => example.value != null)\n      .forEach(example => entry.addExample(example))\n  }\n\n  printConflicts() {\n    if (this.entries.size > 0) {\n      report.warn(\n        `There are conflicting field types in your data.\\n\\n` +\n          `If you have explicitly defined a type for those fields, you can ` +\n          `safely ignore this warning message.\\n` +\n          `Otherwise, Gatsby will omit those fields from the GraphQL schema.\\n\\n` +\n          `If you know all field types in advance, the best strategy is to ` +\n          `explicitly define them with the \\`createTypes\\` action, and skip ` +\n          `inference with the \\`@dontInfer\\` directive.\\n` +\n          `See https://www.gatsbyjs.org/docs/actions/#createTypes`\n      )\n      this.entries.forEach(entry => entry.printEntry())\n    }\n  }\n\n  getConflicts() {\n    return Array.from(this.entries.values())\n  }\n}\n\nmodule.exports = { TypeConflictReporter, TypeConflictEntry }\n"],"file":"type-conflict-reporter.js"}