{"version":3,"sources":["../../src/redux/nodes.ts"],"names":["getNodes","nodes","store","getState","Array","from","values","getNode","id","get","getNodesByType","type","nodesByType","getTypes","keys","hasNodeChanged","digest","node","internal","contentDigest","getNodeAndSavePathDependency","path","console","error","undefined","nodeId","saveResolvedNodes","nodeTypeNames","resolver","typeName","resolvedNodes","Map","resolved","set","dispatch","payload","key","getResolvedNode","resolvedNodesCache","__gatsby_resolved","addResolvedNodes","resolvedNodesFromCache","forEach","push","ensureIndexByTypedChain","cacheKey","chain","typedKeyValueIndexes","has","byKeyValue","includes","v","i","length","nextProp","Set","add","getNodesByTypedChain","value","byTypedKey"],"mappings":";;;;;AAAA;;AAEA;;AAIA;;;AAGO,MAAMA,QAAQ,GAAG,MAAqB;AAC3C,QAAMC,KAAK,GAAGC,QAAMC,QAAN,GAAiBF,KAA/B;;AACA,MAAIA,KAAJ,EAAW;AACT,WAAOG,KAAK,CAACC,IAAN,CAAWJ,KAAK,CAACK,MAAN,EAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CAPM;AASP;;;;;;;AAGO,MAAMC,OAAO,GAAIC,EAAD,IACrBN,QAAMC,QAAN,GAAiBF,KAAjB,CAAuBQ,GAAvB,CAA2BD,EAA3B,CADK;AAGP;;;;;;;AAGO,MAAME,cAAc,GAAIC,IAAD,IAAiC;AAC7D,QAAMV,KAAK,GAAGC,QAAMC,QAAN,GAAiBS,WAAjB,CAA6BH,GAA7B,CAAiCE,IAAjC,CAAd;;AACA,MAAIV,KAAJ,EAAW;AACT,WAAOG,KAAK,CAACC,IAAN,CAAWJ,KAAK,CAACK,MAAN,EAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF,CAPM;AASP;;;;;;;AAGO,MAAMO,QAAQ,GAAG,MACtBT,KAAK,CAACC,IAAN,CAAWH,QAAMC,QAAN,GAAiBS,WAAjB,CAA6BE,IAA7B,EAAX,CADK;AAGP;;;;;;;AAGO,MAAMC,cAAc,GAAG,CAACP,EAAD,EAAaQ,MAAb,KAAyC;AACrE,QAAMC,IAAI,GAAGf,QAAMC,QAAN,GAAiBF,KAAjB,CAAuBQ,GAAvB,CAA2BD,EAA3B,CAAb;;AACA,MAAI,CAACS,IAAL,EAAW;AACT,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAOA,IAAI,CAACC,QAAL,CAAcC,aAAd,KAAgCH,MAAvC;AACD;AACF,CAPM;AASP;;;;;;;AAGO,MAAMI,4BAA4B,GAAG,CAC1CZ,EAD0C,EAE1Ca,IAF0C,KAGd;AAC5B,QAAMJ,IAAI,GAAGV,OAAO,CAACC,EAAD,CAApB;;AAEA,MAAI,CAACS,IAAL,EAAW;AACTK,IAAAA,OAAO,CAACC,KAAR,CACG,oDAAmDf,EAAG,+BADzD;AAGA,WAAOgB,SAAP;AACD;;AAED,+CAAqB;AAAEH,IAAAA,IAAF;AAAQI,IAAAA,MAAM,EAAEjB;AAAhB,GAArB;AACA,SAAOS,IAAP;AACD,CAfM;;;;AAiB6C;AAE7C,MAAMS,iBAAiB,GAAG,OAC/BC,aAD+B,EAE/BC,QAF+B,KAGb;AAClB,OAAK,MAAMC,QAAX,IAAuBF,aAAvB,EAAsC;AACpC,UAAM1B,KAAK,GAAGC,QAAMC,QAAN,GAAiBS,WAAjB,CAA6BH,GAA7B,CAAiCoB,QAAjC,CAAd;;AACA,QAAI,CAAC5B,KAAL,EAAY;AAEZ,UAAM6B,aAAa,GAAG,IAAIC,GAAJ,EAAtB;;AACA,SAAK,MAAMd,IAAX,IAAmBhB,KAAK,CAACK,MAAN,EAAnB,EAAmC;AACjC,YAAM0B,QAAQ,GAAG,MAAMJ,QAAQ,CAACX,IAAD,CAA/B;AACAa,MAAAA,aAAa,CAACG,GAAd,CAAkBhB,IAAI,CAACT,EAAvB,EAA2BwB,QAA3B;AACD;;AACD9B,YAAMgC,QAAN,CAAe;AACbvB,MAAAA,IAAI,EAAG,oBADM;AAEbwB,MAAAA,OAAO,EAAE;AACPC,QAAAA,GAAG,EAAEP,QADE;AAEP5B,QAAAA,KAAK,EAAE6B;AAFA;AAFI,KAAf;AAOD;AACF,CArBM;AAuBP;;;;;;;AAGO,MAAMO,eAAe,GAAG,CAC7BR,QAD6B,EAE7BrB,EAF6B,KAGN;AACvB,QAAM;AAAEI,IAAAA,WAAF;AAAe0B,IAAAA;AAAf,MAAsCpC,QAAMC,QAAN,EAA5C;;AACA,QAAMF,KAAK,GAAGW,WAAW,CAACH,GAAZ,CAAgBoB,QAAhB,CAAd;;AAEA,MAAI,CAAC5B,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,QAAMgB,IAAI,GAAGhB,KAAK,CAACQ,GAAN,CAAUD,EAAV,CAAb;;AAEA,MAAI,CAACS,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,QAAMa,aAAa,GAAGQ,kBAAkB,CAAC7B,GAAnB,CAAuBoB,QAAvB,CAAtB;;AAEA,MAAIC,aAAJ,EAAmB;AACjBb,IAAAA,IAAI,CAACsB,iBAAL,GAAyBT,aAAa,CAACrB,GAAd,CAAkBD,EAAlB,CAAzB;AACD;;AAED,SAAOS,IAAP;AACD,CAxBM;;;;AA0BA,MAAMuB,gBAAgB,GAAG,CAC9BX,QAD8B,EAE9BC,aAA4B,GAAG,EAFD,KAGZ;AAClB,QAAM;AAAElB,IAAAA,WAAF;AAAe0B,IAAAA;AAAf,MAAsCpC,QAAMC,QAAN,EAA5C;;AACA,QAAMF,KAAK,GAAGW,WAAW,CAACH,GAAZ,CAAgBoB,QAAhB,CAAd;;AAEA,MAAI,CAAC5B,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AAED,QAAMwC,sBAAsB,GAAGH,kBAAkB,CAAC7B,GAAnB,CAAuBoB,QAAvB,CAA/B;AAEA5B,EAAAA,KAAK,CAACyC,OAAN,CAAczB,IAAI,IAAI;AACpB,QAAIwB,sBAAJ,EAA4B;AAC1BxB,MAAAA,IAAI,CAACsB,iBAAL,GAAyBE,sBAAsB,CAAChC,GAAvB,CAA2BQ,IAAI,CAACT,EAAhC,CAAzB;AACD;;AACDsB,IAAAA,aAAa,CAACa,IAAd,CAAmB1B,IAAnB;AACD,GALD;AAOA,SAAOa,aAAP;AACD,CArBM;AAuBP;;;;;;;;;;;AAOO,MAAMc,uBAAuB,GAAG,CACrCC,QADqC,EAErCC,KAFqC,EAGrCnB,aAHqC,EAIrCoB,oBAJqC,KAQ5B;AACT,MAAIA,oBAAoB,CAACC,GAArB,CAAyBH,QAAzB,CAAJ,EAAwC;AACtC;AACD;;AAED,QAAM;AAAE5C,IAAAA,KAAF;AAASqC,IAAAA;AAAT,MAAgCpC,QAAMC,QAAN,EAAtC;;AAEA,QAAM8C,UAAU,GAAG,IAAIlB,GAAJ,EAAnB;AACAgB,EAAAA,oBAAoB,CAACd,GAArB,CAAyBY,QAAzB,EAAmCI,UAAnC;AAEAhD,EAAAA,KAAK,CAACyC,OAAN,CAAczB,IAAI,IAAI;AACpB,QAAI,CAACU,aAAa,CAACuB,QAAd,CAAuBjC,IAAI,CAACC,QAAL,CAAcP,IAArC,CAAL,EAAiD;AAC/C;AACD,KAHmB,CAKpB;;;AACA,QAAI,CAACM,IAAI,CAACsB,iBAAV,EAA6B;AAC3B,YAAMV,QAAQ,GAAGZ,IAAI,CAACC,QAAL,CAAcP,IAA/B;AACA,YAAMmB,aAAa,GAAGQ,kBAAkB,CAAC7B,GAAnB,CAAuBoB,QAAvB,CAAtB;AACAZ,MAAAA,IAAI,CAACsB,iBAAL,GAAyBT,aAAzB,aAAyBA,aAAzB,uBAAyBA,aAAa,CAAErB,GAAf,CAAmBQ,IAAI,CAACT,EAAxB,CAAzB;AACD;;AAED,QAAI2C,CAAC,GAAGlC,IAAR;AACA,QAAImC,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAGN,KAAK,CAACO,MAAV,IAAoBF,CAA3B,EAA8B;AAC5B,YAAMG,QAAQ,GAAGR,KAAK,CAACM,CAAC,EAAF,CAAtB;AACAD,MAAAA,CAAC,GAAGA,CAAC,CAACG,QAAD,CAAL;AACD;;AAED,QACG,OAAOH,CAAP,KAAc,QAAd,IACC,OAAOA,CAAP,KAAc,QADf,IAEC,OAAOA,CAAP,KAAc,SAFhB,IAGAC,CAAC,KAAKN,KAAK,CAACO,MAJd,EAKE;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,QAAIpB,GAAG,GAAGgB,UAAU,CAACxC,GAAX,CAAe0C,CAAf,CAAV;;AACA,QAAI,CAAClB,GAAL,EAAU;AACRA,MAAAA,GAAG,GAAG,IAAIsB,GAAJ,EAAN;AACAN,MAAAA,UAAU,CAAChB,GAAX,CAAekB,CAAf,EAAkBlB,GAAlB;AACD;;AACDA,IAAAA,GAAG,CAACuB,GAAJ,CAAQvC,IAAR;AACD,GAtCD;AAuCD,CAzDM;AA2DP;;;;;;;;;;;;;;;;;AAaO,MAAMwC,oBAAoB,GAAG,CAClCZ,QADkC,EAElCa,KAFkC,EAGlCX,oBAHkC,KAOD;AACjC,QAAMY,UAAU,GAAGZ,oBAAH,aAAGA,oBAAH,uBAAGA,oBAAoB,CAAEtC,GAAtB,CAA0BoC,QAA1B,CAAnB;AACA,SAAOc,UAAP,aAAOA,UAAP,uBAAOA,UAAU,CAAElD,GAAZ,CAAgBiD,KAAhB,CAAP;AACD,CAVM","sourcesContent":["import { store } from \"./\"\nimport { IGatsbyNode } from \"./types\"\nimport { createPageDependency } from \"./actions/add-page-dependency\"\n\nexport type FilterCacheKey = string\n\n/**\n * Get all nodes from redux store.\n */\nexport const getNodes = (): IGatsbyNode[] => {\n  const nodes = store.getState().nodes\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\n/**\n * Get node by id from store.\n */\nexport const getNode = (id: string): IGatsbyNode | undefined =>\n  store.getState().nodes.get(id)\n\n/**\n * Get all nodes of type from redux store.\n */\nexport const getNodesByType = (type: string): IGatsbyNode[] => {\n  const nodes = store.getState().nodesByType.get(type)\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\n/**\n * Get all type names from redux store.\n */\nexport const getTypes = (): string[] =>\n  Array.from(store.getState().nodesByType.keys())\n\n/**\n * Determine if node has changed.\n */\nexport const hasNodeChanged = (id: string, digest: string): boolean => {\n  const node = store.getState().nodes.get(id)\n  if (!node) {\n    return true\n  } else {\n    return node.internal.contentDigest !== digest\n  }\n}\n\n/**\n * Get node and save path dependency.\n */\nexport const getNodeAndSavePathDependency = (\n  id: string,\n  path: string\n): IGatsbyNode | undefined => {\n  const node = getNode(id)\n\n  if (!node) {\n    console.error(\n      `getNodeAndSavePathDependency failed for node id: ${id} as it was not found in cache`\n    )\n    return undefined\n  }\n\n  createPageDependency({ path, nodeId: id })\n  return node\n}\n\ntype Resolver = (node: IGatsbyNode) => Promise<any> // TODO\n\nexport const saveResolvedNodes = async (\n  nodeTypeNames: string[],\n  resolver: Resolver\n): Promise<void> => {\n  for (const typeName of nodeTypeNames) {\n    const nodes = store.getState().nodesByType.get(typeName)\n    if (!nodes) return\n\n    const resolvedNodes = new Map()\n    for (const node of nodes.values()) {\n      const resolved = await resolver(node)\n      resolvedNodes.set(node.id, resolved)\n    }\n    store.dispatch({\n      type: `SET_RESOLVED_NODES`,\n      payload: {\n        key: typeName,\n        nodes: resolvedNodes,\n      },\n    })\n  }\n}\n\n/**\n * Get node and save path dependency.\n */\nexport const getResolvedNode = (\n  typeName: string,\n  id: string\n): IGatsbyNode | null => {\n  const { nodesByType, resolvedNodesCache } = store.getState()\n  const nodes = nodesByType.get(typeName)\n\n  if (!nodes) {\n    return null\n  }\n\n  const node = nodes.get(id)\n\n  if (!node) {\n    return null\n  }\n\n  const resolvedNodes = resolvedNodesCache.get(typeName)\n\n  if (resolvedNodes) {\n    node.__gatsby_resolved = resolvedNodes.get(id)\n  }\n\n  return node\n}\n\nexport const addResolvedNodes = (\n  typeName: string,\n  resolvedNodes: IGatsbyNode[] = []\n): IGatsbyNode[] => {\n  const { nodesByType, resolvedNodesCache } = store.getState()\n  const nodes = nodesByType.get(typeName)\n\n  if (!nodes) {\n    return []\n  }\n\n  const resolvedNodesFromCache = resolvedNodesCache.get(typeName)\n\n  nodes.forEach(node => {\n    if (resolvedNodesFromCache) {\n      node.__gatsby_resolved = resolvedNodesFromCache.get(node.id)\n    }\n    resolvedNodes.push(node)\n  })\n\n  return resolvedNodes\n}\n\n/**\n * Given a (\"flat\") filter path leading up to \"eq\", a set of node types, and a\n * cache, create a cache that for each resulting value of the filter contains\n * all the Nodes in a Set (or, if the property is `id`, just the Nodes).\n * This cache is used for applying the filter and is a massive improvement over\n * looping over all the nodes, when the number of pages (/nodes) scale up.\n */\nexport const ensureIndexByTypedChain = (\n  cacheKey: FilterCacheKey,\n  chain: string[],\n  nodeTypeNames: string[],\n  typedKeyValueIndexes: Map<\n    FilterCacheKey,\n    Map<string | number | boolean, Set<IGatsbyNode>>\n  >\n): void => {\n  if (typedKeyValueIndexes.has(cacheKey)) {\n    return\n  }\n\n  const { nodes, resolvedNodesCache } = store.getState()\n\n  const byKeyValue = new Map<string | number | boolean, Set<IGatsbyNode>>()\n  typedKeyValueIndexes.set(cacheKey, byKeyValue)\n\n  nodes.forEach(node => {\n    if (!nodeTypeNames.includes(node.internal.type)) {\n      return\n    }\n\n    // There can be a filter that targets `__gatsby_resolved` so fix that first\n    if (!node.__gatsby_resolved) {\n      const typeName = node.internal.type\n      const resolvedNodes = resolvedNodesCache.get(typeName)\n      node.__gatsby_resolved = resolvedNodes?.get(node.id)\n    }\n\n    let v = node as any\n    let i = 0\n    while (i < chain.length && v) {\n      const nextProp = chain[i++]\n      v = v[nextProp]\n    }\n\n    if (\n      (typeof v !== `string` &&\n        typeof v !== `number` &&\n        typeof v !== `boolean`) ||\n      i !== chain.length\n    ) {\n      // Not sure whether this is supposed to happen, but this means that either\n      // - The node chain ended with `undefined`, or\n      // - The node chain ended in something other than a primitive, or\n      // - A part in the chain in the object was not an object\n      return\n    }\n\n    let set = byKeyValue.get(v)\n    if (!set) {\n      set = new Set()\n      byKeyValue.set(v, set)\n    }\n    set.add(node)\n  })\n}\n\n/**\n * Given a (\"flat\") filter path leading up to \"eq\", a target value to filter\n * for, a set of node types, and a pre-generated lookup cache, return the set\n * of Nodes (or, if the property is `id` just the Node) which pass the filter.\n * This returns `undefined` if there is Node that passes the filter.\n *\n * Basically if the filter was {a: {b: {slug: {eq: \"foo/bar\"}}}} then it will\n * return all the nodes that have `node.slug === \"foo/bar\"`. That usually (but\n * not always) at most one node for slug, but this filter can apply to anything.\n *\n * The only exception is `id`, since internally there can be at most one node\n * per `id` so there's a minor optimization for that (no need for Sets).\n */\nexport const getNodesByTypedChain = (\n  cacheKey: FilterCacheKey,\n  value: boolean | number | string,\n  typedKeyValueIndexes: Map<\n    FilterCacheKey,\n    Map<string | number | boolean, Set<IGatsbyNode>>\n  >\n): Set<IGatsbyNode> | undefined => {\n  const byTypedKey = typedKeyValueIndexes?.get(cacheKey)\n  return byTypedKey?.get(value)\n}\n"],"file":"nodes.js"}