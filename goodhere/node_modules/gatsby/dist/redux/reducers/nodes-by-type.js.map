{"version":3,"sources":["../../../src/redux/reducers/nodes-by-type.js"],"names":["getNodesOfType","node","state","type","internal","has","set","Map","get","module","exports","action","payload","nodesOfType","id","delete","size","ids","forEach","Array","from","some","nodes"],"mappings":";;AAAA,MAAMA,cAAc,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAWF,IAAI,CAACG,QAAtB;;AACA,MAAI,CAACF,KAAK,CAACG,GAAN,CAAUF,IAAV,CAAL,EAAsB;AACpBD,IAAAA,KAAK,CAACI,GAAN,CAAUH,IAAV,EAAgB,IAAII,GAAJ,EAAhB;AACD;;AACD,SAAOL,KAAK,CAACM,GAAN,CAAUL,IAAV,CAAP;AACD,CAND;;AAQAM,MAAM,CAACC,OAAP,GAAiB,CAACR,KAAK,GAAG,IAAIK,GAAJ,EAAT,EAAoBI,MAApB,KAA+B;AAC9C,UAAQA,MAAM,CAACR,IAAf;AACE,SAAM,cAAN;AACE,aAAO,IAAII,GAAJ,EAAP;;AAEF,SAAM,aAAN;AAAoB;AAClB,cAAMN,IAAI,GAAGU,MAAM,CAACC,OAApB;AACA,cAAMC,WAAW,GAAGb,cAAc,CAACC,IAAD,EAAOC,KAAP,CAAlC;AACAW,QAAAA,WAAW,CAACP,GAAZ,CAAgBL,IAAI,CAACa,EAArB,EAAyBb,IAAzB;AACA,eAAOC,KAAP;AACD;;AAED,SAAM,mBAAN;AACA,SAAM,+BAAN;AAAsC;AACpC,cAAMD,IAAI,GAAGU,MAAM,CAACC,OAApB;AACA,cAAMC,WAAW,GAAGb,cAAc,CAACC,IAAD,EAAOC,KAAP,CAAlC;AACAW,QAAAA,WAAW,CAACP,GAAZ,CAAgBL,IAAI,CAACa,EAArB,EAAyBb,IAAzB;AACA,eAAOC,KAAP;AACD;;AAED,SAAM,aAAN;AAAoB;AAClB,cAAMD,IAAI,GAAGU,MAAM,CAACC,OAApB;AACA,YAAI,CAACX,IAAL,EAAW,OAAOC,KAAP;AACX,cAAMW,WAAW,GAAGb,cAAc,CAACC,IAAD,EAAOC,KAAP,CAAlC;AACAW,QAAAA,WAAW,CAACE,MAAZ,CAAmBd,IAAI,CAACa,EAAxB;;AACA,YAAI,CAACD,WAAW,CAACG,IAAjB,EAAuB;AACrBd,UAAAA,KAAK,CAACa,MAAN,CAAad,IAAI,CAACG,QAAL,CAAcD,IAA3B;AACD;;AACD,eAAOD,KAAP;AACD;AAED;;AACA,SAAM,cAAN;AAAqB;AACnB,cAAMe,GAAG,GAAGN,MAAM,CAACC,OAAnB;AACAK,QAAAA,GAAG,CAACC,OAAJ,CAAYJ,EAAE,IAAI;AAChBK,UAAAA,KAAK,CAACC,IAAN,CAAWlB,KAAX,EAAkBmB,IAAlB,CAAuB,CAAC,CAAClB,IAAD,EAAOmB,KAAP,CAAD,KAAmB;AACxC,gBAAIA,KAAK,CAACjB,GAAN,CAAUS,EAAV,CAAJ,EAAmB;AACjBQ,cAAAA,KAAK,CAACP,MAAN,CAAaD,EAAb;;AACA,kBAAI,CAACQ,KAAK,CAACN,IAAX,EAAiB;AACfd,gBAAAA,KAAK,CAACa,MAAN,CAAaZ,IAAb;AACD;;AACD,qBAAO,IAAP;AACD;;AACD,mBAAO,KAAP;AACD,WATD;AAUD,SAXD;AAYA,eAAOD,KAAP;AACD;;AAED;AACE,aAAOA,KAAP;AAjDJ;AAmDD,CApDD","sourcesContent":["const getNodesOfType = (node, state) => {\n  const { type } = node.internal\n  if (!state.has(type)) {\n    state.set(type, new Map())\n  }\n  return state.get(type)\n}\n\nmodule.exports = (state = new Map(), action) => {\n  switch (action.type) {\n    case `DELETE_CACHE`:\n      return new Map()\n\n    case `CREATE_NODE`: {\n      const node = action.payload\n      const nodesOfType = getNodesOfType(node, state)\n      nodesOfType.set(node.id, node)\n      return state\n    }\n\n    case `ADD_FIELD_TO_NODE`:\n    case `ADD_CHILD_NODE_TO_PARENT_NODE`: {\n      const node = action.payload\n      const nodesOfType = getNodesOfType(node, state)\n      nodesOfType.set(node.id, node)\n      return state\n    }\n\n    case `DELETE_NODE`: {\n      const node = action.payload\n      if (!node) return state\n      const nodesOfType = getNodesOfType(node, state)\n      nodesOfType.delete(node.id)\n      if (!nodesOfType.size) {\n        state.delete(node.internal.type)\n      }\n      return state\n    }\n\n    // Deprecated, will be removed in Gatsby v3.\n    case `DELETE_NODES`: {\n      const ids = action.payload\n      ids.forEach(id => {\n        Array.from(state).some(([type, nodes]) => {\n          if (nodes.has(id)) {\n            nodes.delete(id)\n            if (!nodes.size) {\n              state.delete(type)\n            }\n            return true\n          }\n          return false\n        })\n      })\n      return state\n    }\n\n    default:\n      return state\n  }\n}\n"],"file":"nodes-by-type.js"}