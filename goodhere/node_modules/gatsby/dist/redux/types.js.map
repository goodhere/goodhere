{"version":3,"sources":["../../src/redux/types.ts"],"names":["ProgramStatus"],"mappings":";;;;AAMyB;IAEbA,a;;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,6BAAAA,a","sourcesContent":["import { IProgram } from \"../commands/types\"\nimport { GraphQLSchema } from \"graphql\"\nimport { SchemaComposer } from \"graphql-compose\"\n\ntype SystemPath = string\ntype Identifier = string\ntype StructuredLog = any // TODO this should come from structured log interface\n\nexport enum ProgramStatus {\n  BOOTSTRAP_FINISHED = `BOOTSTRAP_FINISHED`,\n  BOOTSTRAP_QUERY_RUNNING_FINISHED = `BOOTSTRAP_QUERY_RUNNING_FINISHED`,\n}\n\nexport interface IGatsbyPage {\n  internalComponentName: string\n  path: string\n  matchPath: undefined | string\n  component: SystemPath\n  componentChunkName: string\n  isCreatedByStatefulCreatePages: boolean\n  context: {}\n  updatedAt: number\n  pluginCreator__NODE: Identifier\n  pluginCreatorId: Identifier\n  componentPath: SystemPath\n}\n\nexport interface IGatsbyConfig {\n  plugins?: {\n    // This is the name of the plugin like `gatsby-plugin-manifest\n    resolve: string\n    options: {\n      [key: string]: unknown\n    }\n  }[]\n  siteMetadata?: {\n    title?: string\n    author?: string\n    description?: string\n  }\n  // @deprecated\n  polyfill?: boolean\n  developMiddleware?: any\n  proxy?: any\n  pathPrefix?: string\n}\n\nexport interface IGatsbyNode {\n  id: Identifier\n  parent: Identifier\n  children: Identifier[]\n  internal: {\n    type: string\n    counter: number\n    owner: string\n    contentDigest: string\n    mediaType?: string\n    content?: string\n    description?: string\n  }\n  __gatsby_resolved: any // TODO\n  [key: string]: unknown\n}\n\ntype GatsbyNodes = Map<string, IGatsbyNode>\n\nexport interface IGatsbyState {\n  program: IProgram\n  nodes: GatsbyNodes\n  nodesByType: Map<string, GatsbyNodes>\n  resolvedNodesCache: Map<string, any> // TODO\n  nodesTouched: Set<string>\n  lastAction: ActionsUnion\n  flattenedPlugins: {\n    resolve: SystemPath\n    id: Identifier\n    name: string\n    version: string\n    pluginOptions: {\n      plugins: []\n      [key: string]: unknown\n    }\n    nodeAPIs: (\n      | \"onPreBoostrap\"\n      | \"onPostBoostrap\"\n      | \"onCreateWebpackConfig\"\n      | \"onCreatePage\"\n      | \"sourceNodes\"\n      | \"createPagesStatefully\"\n      | \"createPages\"\n      | \"onPostBuild\"\n    )[]\n    browserAPIs: (\n      | \"onRouteUpdate\"\n      | \"registerServiceWorker\"\n      | \"onServiceWorkerActive\"\n      | \"onPostPrefetchPathname\"\n    )[]\n    ssrAPIs: (\"onRenderBody\" | \"onPreRenderHTML\")[]\n    pluginFilepath: SystemPath\n  }[]\n  config: IGatsbyConfig\n  pages: Map<string, IGatsbyPage>\n  schema: GraphQLSchema\n  status: {\n    plugins: {}\n    PLUGINS_HASH: Identifier\n  }\n  componentDataDependencies: {\n    nodes: Map<string, Set<string>>\n    connections: Map<string, Set<string>>\n  }\n  components: Map<\n    SystemPath,\n    {\n      componentPath: SystemPath\n      query: string\n      pages: Set<string>\n      isInBootstrap: boolean\n    }\n  >\n  staticQueryComponents: Map<\n    number,\n    {\n      name: string\n      componentPath: SystemPath\n      id: Identifier\n      query: string\n      hash: string\n    }\n  >\n  // @deprecated\n  jobs: {\n    active: any[] // TODO\n    done: any[] // TODO\n  }\n  jobsV2: {\n    incomplete: Map<any, any> // TODO\n    complete: Map<any, any>\n  }\n  webpack: any // TODO This should be the output from ./utils/webpack.config.js\n  webpackCompilationHash: string\n  redirects: any[] // TODO\n  babelrc: {\n    stages: {\n      develop: any // TODO\n      \"develop-html\": any // TODO\n      \"build-html\": any // TODO\n      \"build-javascript\": any // TODO\n    }\n  }\n  schemaCustomization: {\n    composer: SchemaComposer<any>\n    context: {} // TODO\n    fieldExtensions: {} // TODO\n    printConfig: any // TODO\n    thridPartySchemas: any[] // TODO\n    types: any[] // TODO\n  }\n  themes: any // TODO\n  logs: {\n    messages: StructuredLog[]\n    activities: {\n      [key: string]: {\n        id: Identifier\n        uuid: Identifier\n        text: string\n        type: string // TODO make enum\n        status: string // TODO make enum\n        startTime: [number, number]\n        statusText: string\n        current: undefined | any // TODO\n        total: undefined | any // TODO\n        duration: number\n      }\n    }\n    status: string // TODO make enum\n  }\n  inferenceMetadata: {\n    step: string // TODO make enum or union\n    typeMap: {\n      [key: string]: {\n        ignoredFields: Set<string>\n        total: number\n        dirty: boolean\n        fieldMap: any // TODO\n      }\n    }\n  }\n  pageDataStats: Map<SystemPath, number>\n  pageData: any\n}\n\nexport interface ICachedReduxState {\n  nodes?: IGatsbyState[\"nodes\"]\n  status: IGatsbyState[\"status\"]\n  componentDataDependencies: IGatsbyState[\"componentDataDependencies\"]\n  components: IGatsbyState[\"components\"]\n  jobsV2: IGatsbyState[\"jobsV2\"]\n  staticQueryComponents: IGatsbyState[\"staticQueryComponents\"]\n  webpackCompilationHash: IGatsbyState[\"webpackCompilationHash\"]\n  pageDataStats: IGatsbyState[\"pageDataStats\"]\n  pageData: IGatsbyState[\"pageData\"]\n}\n\nexport type ActionsUnion =\n  | ICreatePageDependencyAction\n  | IDeleteComponentDependenciesAction\n  | IReplaceComponentQueryAction\n  | IReplaceStaticQueryAction\n  | IQueryExtractedAction\n  | IQueryExtractionGraphQLErrorAction\n  | IQueryExtractedBabelSuccessAction\n  | IQueryExtractionBabelErrorAction\n  | ISetProgramStatusAction\n  | IPageQueryRunAction\n\nexport interface ICreatePageDependencyAction {\n  type: `CREATE_COMPONENT_DEPENDENCY`\n  plugin: string\n  payload: {\n    path: string\n    nodeId?: string\n    connection?: string\n  }\n}\n\nexport interface IDeleteComponentDependenciesAction {\n  type: \"DELETE_COMPONENTS_DEPENDENCIES\"\n  payload: {\n    paths: string[]\n  }\n}\n\nexport interface IReplaceComponentQueryAction {\n  type: \"REPLACE_COMPONENT_QUERY\"\n  payload: {\n    query: string\n    componentPath: string\n  }\n}\n\nexport interface IReplaceStaticQueryAction {\n  type: `REPLACE_STATIC_QUERY`\n  plugin: Plugin | null | undefined\n  payload: {\n    name: string\n    componentPath: string\n    id: string\n    query: string\n    hash: string\n  }\n}\n\nexport interface IQueryExtractedAction {\n  type: `QUERY_EXTRACTED`\n  plugin: Plugin\n  traceId: string | undefined\n  payload: { componentPath: string; query: string }\n}\n\nexport interface IQueryExtractionGraphQLErrorAction {\n  type: `QUERY_EXTRACTION_GRAPHQL_ERROR`\n  plugin: Plugin\n  traceId: string | undefined\n  payload: { componentPath: string; error: string }\n}\n\nexport interface IQueryExtractedBabelSuccessAction {\n  type: `QUERY_EXTRACTION_BABEL_SUCCESS`\n  plugin: Plugin\n  traceId: string | undefined\n  payload: { componentPath: string }\n}\n\nexport interface IQueryExtractionBabelErrorAction {\n  type: `QUERY_EXTRACTION_BABEL_ERROR`\n  plugin: Plugin\n  traceId: string | undefined\n  payload: {\n    componentPath: string\n    error: Error\n  }\n}\n\nexport interface ISetProgramStatusAction {\n  type: `SET_PROGRAM_STATUS`\n  plugin: Plugin\n  traceId: string | undefined\n  payload: ProgramStatus\n}\n\nexport interface IPageQueryRunAction {\n  type: `PAGE_QUERY_RUN`\n  plugin: Plugin\n  traceId: string | undefined\n  payload: { path: string; componentPath: string; isPage: boolean }\n}\n\nexport interface IRemoveStaleJobAction {\n  type: `REMOVE_STALE_JOB_V2`\n  plugin: Plugin\n  traceId?: string\n  payload: { contentDigest: string }\n}\n"],"file":"types.js"}