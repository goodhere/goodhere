{"version":3,"sources":["../../src/query/query-runner.js"],"names":["fs","require","report","path","store","boundActionCreators","pageDataUtil","getCodeFrame","default","errorParser","resultHashes","Map","module","exports","graphqlRunner","queryJob","program","getState","graphql","query","context","result","errors","urlPath","undefined","queryContext","plugin","pluginCreatorId","isPage","structuredErrors","map","e","structuredError","message","codeFrame","locations","line","column","filePath","componentPath","filter","Boolean","panicOnBuild","Object","assign","pageContext","internalComponentName","component","componentChunkName","updatedAt","pluginCreator___NODE","isCreatedByStatefulCreatePages","resultJSON","JSON","stringify","resultHash","createHash","update","digest","get","id","set","publicDir","join","directory","pages","page","write","resultPath","hash","outputFile","pageQueryRun","process","env","GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES","setPageData"],"mappings":"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","sourcesContent":["// @flow\n\nconst fs = require(`fs-extra`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst path = require(`path`)\nconst { store } = require(`../redux`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst pageDataUtil = require(`../utils/page-data`)\nconst { getCodeFrame } = require(`./graphql-errors`)\nconst { default: errorParser } = require(`./error-parser`)\n\nconst resultHashes = new Map()\n\ntype QueryJob = {\n  id: string,\n  hash?: string,\n  query: string,\n  componentPath: string,\n  context: Object,\n  isPage: Boolean,\n}\n\n// Run query\nmodule.exports = async (graphqlRunner, queryJob: QueryJob) => {\n  const { program } = store.getState()\n\n  const graphql = (query, context) => graphqlRunner.query(query, context)\n\n  // Run query\n  let result\n  // Nothing to do if the query doesn't exist.\n  if (!queryJob.query || queryJob.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(queryJob.query, queryJob.context)\n  }\n\n  // If there's a graphql error then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    let urlPath = undefined\n    let queryContext = {}\n    const plugin = queryJob.pluginCreatorId || `none`\n\n    if (queryJob.isPage) {\n      urlPath = queryJob.context.path\n      queryContext = queryJob.context.context\n    }\n\n    const structuredErrors = result.errors\n      .map(e => {\n        const structuredError = errorParser({\n          message: e.message,\n        })\n\n        structuredError.context = {\n          ...structuredError.context,\n          codeFrame: getCodeFrame(\n            queryJob.query,\n            e.locations && e.locations[0].line,\n            e.locations && e.locations[0].column\n          ),\n          filePath: queryJob.componentPath,\n          ...(urlPath && { urlPath }),\n          ...queryContext,\n          plugin,\n        }\n\n        return structuredError\n      })\n      .filter(Boolean)\n\n    report.panicOnBuild(structuredErrors)\n  }\n\n  // Add the page context onto the results.\n  if (queryJob && queryJob.isPage) {\n    result[`pageContext`] = Object.assign({}, queryJob.context)\n  }\n\n  // Delete internal data from pageContext\n  if (result.pageContext) {\n    delete result.pageContext.path\n    delete result.pageContext.internalComponentName\n    delete result.pageContext.component\n    delete result.pageContext.componentChunkName\n    delete result.pageContext.updatedAt\n    delete result.pageContext.pluginCreator___NODE\n    delete result.pageContext.pluginCreatorId\n    delete result.pageContext.componentPath\n    delete result.pageContext.context\n    delete result.pageContext.isCreatedByStatefulCreatePages\n  }\n\n  const resultJSON = JSON.stringify(result)\n  const resultHash = require(`crypto`)\n    .createHash(`sha1`)\n    .update(resultJSON)\n    .digest(`base64`)\n  if (resultHash !== resultHashes.get(queryJob.id)) {\n    resultHashes.set(queryJob.id, resultHash)\n\n    if (queryJob.isPage) {\n      const publicDir = path.join(program.directory, `public`)\n      const { pages } = store.getState()\n      const page = pages.get(queryJob.id)\n      await pageDataUtil.write({ publicDir }, page, result)\n    } else {\n      // The babel plugin is hard-coded to load static queries from\n      // public/static/d/\n      const resultPath = path.join(\n        program.directory,\n        `public`,\n        `static`,\n        `d`,\n        `${queryJob.hash}.json`\n      )\n      await fs.outputFile(resultPath, resultJSON)\n    }\n  }\n\n  boundActionCreators.pageQueryRun({\n    path: queryJob.id,\n    componentPath: queryJob.componentPath,\n    isPage: queryJob.isPage,\n  })\n\n  // Sets pageData to the store, here for easier access to the resultHash\n  if (\n    process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES &&\n    queryJob.isPage\n  ) {\n    boundActionCreators.setPageData({\n      id: queryJob.id,\n      resultHash,\n    })\n  }\n  return result\n}\n"],"file":"query-runner.js"}