{"version":3,"sources":["../../src/utils/get-ssl-cert.js"],"names":["report","require","fs","path","os","absoluteOrDirectory","directory","filePath","isAbsolute","join","module","exports","name","certFile","keyFile","panic","id","context","keyPath","certPath","key","readFileSync","cert","info","includes","platform","process","env","HOME","mkdtemp","mkdtempSync","tmpdir","certificateFor","installCertutil","err","error","message"],"mappings":";;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAE,IAAF,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAE,MAAF,CAApB;;AACA,MAAMG,EAAE,GAAGH,OAAO,CAAE,IAAF,CAAlB;;AAEA,MAAMI,mBAAmB,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AACnD;AACA,MAAIJ,IAAI,CAACK,UAAL,CAAgBD,QAAhB,CAAJ,EAA+B;AAC7B,WAAOA,QAAP;AACD;;AACD,SAAOJ,IAAI,CAACM,IAAL,CAAUH,SAAV,EAAqBC,QAArB,CAAP;AACD,CAND;;AAQAG,MAAM,CAACC,OAAP,GAAiB,OAAO;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,OAAlB;AAA2BR,EAAAA;AAA3B,CAAP,KAAkD;AACjE;AACA;AACA,MAAIO,QAAQ,GAAG,CAACC,OAAJ,GAAcA,OAA1B,EAAmC;AACjCd,IAAAA,MAAM,CAACe,KAAP,CAAa;AACXC,MAAAA,EAAE,EAAG,OADM;AAEXC,MAAAA,OAAO,EAAE;AAFE,KAAb;AAID;;AAED,MAAIJ,QAAQ,IAAIC,OAAhB,EAAyB;AACvB,UAAMI,OAAO,GAAGb,mBAAmB,CAACC,SAAD,EAAYQ,OAAZ,CAAnC;AACA,UAAMK,QAAQ,GAAGd,mBAAmB,CAACC,SAAD,EAAYO,QAAZ,CAApC;AAEA,WAAO,MAAM;AACXK,MAAAA,OADW;AAEXC,MAAAA,QAFW;AAGXC,MAAAA,GAAG,EAAElB,EAAE,CAACmB,YAAH,CAAgBH,OAAhB,CAHM;AAIXI,MAAAA,IAAI,EAAEpB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB;AAJK,KAAb;AAMD;;AAEDnB,EAAAA,MAAM,CAACuB,IAAP,CAAa,2DAAb;;AACA,MAAI;AACF,QAAI,CAAE,OAAF,EAAW,QAAX,EAAoBC,QAApB,CAA6BpB,EAAE,CAACqB,QAAH,EAA7B,KAA+C,CAACC,OAAO,CAACC,GAAR,CAAYC,IAAhE,EAAsE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMC,OAAO,GAAG3B,EAAE,CAAC4B,WAAH,CAAe3B,IAAI,CAACM,IAAL,CAAUL,EAAE,CAAC2B,MAAH,EAAV,EAAwB,OAAxB,CAAf,CAAhB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ,GAAmBC,OAAnB;AACD;;AACD,UAAMG,cAAc,GAAG/B,OAAO,CAAE,SAAF,CAAP,CAAmB+B,cAA1C;;AACA,WAAO,MAAMA,cAAc,CAACpB,IAAD,EAAO;AAChCqB,MAAAA,eAAe,EAAE;AADe,KAAP,CAA3B;AAGD,GAhBD,CAgBE,OAAOC,GAAP,EAAY;AACZlC,IAAAA,MAAM,CAACe,KAAP,CAAa;AACXC,MAAAA,EAAE,EAAG,OADM;AAEXmB,MAAAA,KAAK,EAAED,GAFI;AAGXjB,MAAAA,OAAO,EAAE;AACPmB,QAAAA,OAAO,EAAEF,GAAG,CAACE;AADN;AAHE,KAAb;AAOD;;AAED,SAAO,KAAP;AACD,CAlDD","sourcesContent":["const report = require(`gatsby-cli/lib/reporter`)\nconst fs = require(`fs`)\nconst path = require(`path`)\nconst os = require(`os`)\n\nconst absoluteOrDirectory = (directory, filePath) => {\n  // Support absolute paths\n  if (path.isAbsolute(filePath)) {\n    return filePath\n  }\n  return path.join(directory, filePath)\n}\n\nmodule.exports = async ({ name, certFile, keyFile, directory }) => {\n  // check that cert file and key file are both true or both false, if they are both\n  // false, it defaults to the automatic ssl\n  if (certFile ? !keyFile : keyFile) {\n    report.panic({\n      id: `11521`,\n      context: {},\n    })\n  }\n\n  if (certFile && keyFile) {\n    const keyPath = absoluteOrDirectory(directory, keyFile)\n    const certPath = absoluteOrDirectory(directory, certFile)\n\n    return await {\n      keyPath,\n      certPath,\n      key: fs.readFileSync(keyPath),\n      cert: fs.readFileSync(certPath),\n    }\n  }\n\n  report.info(`setting up automatic SSL certificate (may require sudo)\\n`)\n  try {\n    if ([`linux`, `darwin`].includes(os.platform()) && !process.env.HOME) {\n      // this is a total hack to ensure process.env.HOME is set on linux and mac\n      // devcert creates config path at import time (hence we import devcert after setting dummy value):\n      // - https://github.com/davewasmer/devcert/blob/2b1b8d40eda251616bf74fd69f00ae8222ca1171/src/constants.ts#L15\n      // - https://github.com/LinusU/node-application-config-path/blob/ae49ff6748b68b29ec76c00ce4a28ba8e9161d9b/index.js#L13\n      // if HOME is not set, we will get:\n      // \"The \"path\" argument must be of type s tring. Received type undefined\"\n      // fatal error. This still likely will result in fatal error, but at least it's not on import time\n      const mkdtemp = fs.mkdtempSync(path.join(os.tmpdir(), `home-`))\n      process.env.HOME = mkdtemp\n    }\n    const certificateFor = require(`devcert`).certificateFor\n    return await certificateFor(name, {\n      installCertutil: true,\n    })\n  } catch (err) {\n    report.panic({\n      id: `11522`,\n      error: err,\n      context: {\n        message: err.message,\n      },\n    })\n  }\n\n  return false\n}\n"],"file":"get-ssl-cert.js"}