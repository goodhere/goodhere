{"version":3,"sources":["../../src/utils/page-data.js"],"names":["fs","require","path","store","fixedPagePath","pagePath","getFilePath","publicDir","join","read","filePath","rawPageData","readFile","JSON","parse","remove","write","page","result","body","componentChunkName","matchPath","bodyStr","stringify","pageDataSize","Buffer","byteLength","dispatch","type","payload","size","outputFile","module","exports"],"mappings":";;AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAE,UAAF,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAE,MAAF,CAApB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAYF,OAAO,CAAE,UAAF,CAAzB;;AAEA,MAAMG,aAAa,GAAGC,QAAQ,IAAKA,QAAQ,KAAM,GAAd,GAAoB,OAApB,GAA6BA,QAAhE;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,EAAgBF,QAAhB,KAClBH,IAAI,CAACM,IAAL,CAAUD,SAAV,EAAsB,WAAtB,EAAkCH,aAAa,CAACC,QAAD,CAA/C,EAA4D,gBAA5D,CADF;;AAGA,MAAMI,IAAI,GAAG,OAAO;AAAEF,EAAAA;AAAF,CAAP,EAAsBF,QAAtB,KAAmC;AAC9C,QAAMK,QAAQ,GAAGJ,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgBF,QAAhB,CAA5B;AACA,QAAMM,WAAW,GAAG,MAAMX,EAAE,CAACY,QAAH,CAAYF,QAAZ,EAAuB,OAAvB,CAA1B;AACA,SAAOG,IAAI,CAACC,KAAL,CAAWH,WAAX,CAAP;AACD,CAJD;;AAMA,MAAMI,MAAM,GAAG,OAAO;AAAER,EAAAA;AAAF,CAAP,EAAsBF,QAAtB,KAAmC;AAChD,QAAMK,QAAQ,GAAGJ,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgBF,QAAhB,CAA5B;AACA,SAAOL,EAAE,CAACe,MAAH,CAAUL,QAAV,CAAP;AACD,CAHD;;AAKA,MAAMM,KAAK,GAAG,OAAO;AAAET,EAAAA;AAAF,CAAP,EAAsBU,IAAtB,EAA4BC,MAA5B,KAAuC;AACnD,QAAMR,QAAQ,GAAGJ,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgBU,IAAI,CAACf,IAArB,CAA5B;AACA,QAAMiB,IAAI,GAAG;AACXC,IAAAA,kBAAkB,EAAEH,IAAI,CAACG,kBADd;AAEXlB,IAAAA,IAAI,EAAEe,IAAI,CAACf,IAFA;AAGXmB,IAAAA,SAAS,EAAEJ,IAAI,CAACI,SAHL;AAIXH,IAAAA;AAJW,GAAb;AAMA,QAAMI,OAAO,GAAGT,IAAI,CAACU,SAAL,CAAeJ,IAAf,CAAhB,CARmD,CASnD;;AACA,QAAMK,YAAY,GAAGC,MAAM,CAACC,UAAP,CAAkBJ,OAAlB,IAA6B,IAAlD;AAEAnB,EAAAA,KAAK,CAACwB,QAAN,CAAe;AACbC,IAAAA,IAAI,EAAG,qBADM;AAEbC,IAAAA,OAAO,EAAE;AACPnB,MAAAA,QADO;AAEPoB,MAAAA,IAAI,EAAEN;AAFC;AAFI,GAAf;AAQA,QAAMxB,EAAE,CAAC+B,UAAH,CAAcrB,QAAd,EAAwBY,OAAxB,CAAN;AACD,CArBD;;AAuBAU,MAAM,CAACC,OAAP,GAAiB;AACfxB,EAAAA,IADe;AAEfO,EAAAA,KAFe;AAGfD,EAAAA,MAHe;AAIfX,EAAAA;AAJe,CAAjB","sourcesContent":["const fs = require(`fs-extra`)\nconst path = require(`path`)\nconst { store } = require(`../redux`)\n\nconst fixedPagePath = pagePath => (pagePath === `/` ? `index` : pagePath)\n\nconst getFilePath = ({ publicDir }, pagePath) =>\n  path.join(publicDir, `page-data`, fixedPagePath(pagePath), `page-data.json`)\n\nconst read = async ({ publicDir }, pagePath) => {\n  const filePath = getFilePath({ publicDir }, pagePath)\n  const rawPageData = await fs.readFile(filePath, `utf-8`)\n  return JSON.parse(rawPageData)\n}\n\nconst remove = async ({ publicDir }, pagePath) => {\n  const filePath = getFilePath({ publicDir }, pagePath)\n  return fs.remove(filePath)\n}\n\nconst write = async ({ publicDir }, page, result) => {\n  const filePath = getFilePath({ publicDir }, page.path)\n  const body = {\n    componentChunkName: page.componentChunkName,\n    path: page.path,\n    matchPath: page.matchPath,\n    result,\n  }\n  const bodyStr = JSON.stringify(body)\n  // transform asset size to kB (from bytes) to fit 64 bit to numbers\n  const pageDataSize = Buffer.byteLength(bodyStr) / 1000\n\n  store.dispatch({\n    type: `ADD_PAGE_DATA_STATS`,\n    payload: {\n      filePath,\n      size: pageDataSize,\n    },\n  })\n\n  await fs.outputFile(filePath, bodyStr)\n}\n\nmodule.exports = {\n  read,\n  write,\n  remove,\n  fixedPagePath,\n}\n"],"file":"page-data.js"}