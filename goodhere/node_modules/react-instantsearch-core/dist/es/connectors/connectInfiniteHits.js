import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import isEqual from 'react-fast-compare';
import createConnector from '../core/createConnector';
import { getCurrentRefinementValue, refineValue, getResults } from '../core/indexUtils';
import { addAbsolutePositions, addQueryID } from '../core/utils';

function getId() {
  return 'page';
}

function getCurrentRefinement(props, searchState, context) {
  var id = getId();
  var page = 1;
  var currentRefinement = getCurrentRefinementValue(props, searchState, context, id, page);

  if (typeof currentRefinement === 'string') {
    return parseInt(currentRefinement, 10);
  }

  return currentRefinement;
}
/**
 * InfiniteHits connector provides the logic to create connected
 * components that will render an continuous list of results retrieved from
 * Algolia. This connector provides a function to load more results.
 * @name connectInfiniteHits
 * @kind connector
 * @providedPropType {array.<object>} hits - the records that matched the search state
 * @providedPropType {boolean} hasMore - indicates if there are more pages to load
 * @providedPropType {function} refine - call to load more results
 */


export default createConnector({
  displayName: 'AlgoliaInfiniteHits',
  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {
    var _this = this;

    var results = getResults(searchResults, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    });
    this._allResults = this._allResults || [];
    this._prevState = this._prevState || {};

    if (!results) {
      return {
        hits: [],
        hasPrevious: false,
        hasMore: false,
        refine: function refine() {},
        refinePrevious: function refinePrevious() {},
        refineNext: function refineNext() {}
      };
    }

    var page = results.page,
        hits = results.hits,
        hitsPerPage = results.hitsPerPage,
        nbPages = results.nbPages,
        _results$_state = results._state;
    _results$_state = _results$_state === void 0 ? {} : _results$_state;

    var p = _results$_state.page,
        currentState = _objectWithoutProperties(_results$_state, ["page"]);

    var hitsWithPositions = addAbsolutePositions(hits, hitsPerPage, page);
    var hitsWithPositionsAndQueryID = addQueryID(hitsWithPositions, results.queryID);

    if (this._firstReceivedPage === undefined || !isEqual(currentState, this._prevState)) {
      this._allResults = _toConsumableArray(hitsWithPositionsAndQueryID);
      this._firstReceivedPage = page;
      this._lastReceivedPage = page;
    } else if (this._lastReceivedPage < page) {
      this._allResults = [].concat(_toConsumableArray(this._allResults), _toConsumableArray(hitsWithPositionsAndQueryID));
      this._lastReceivedPage = page;
    } else if (this._firstReceivedPage > page) {
      this._allResults = [].concat(_toConsumableArray(hitsWithPositionsAndQueryID), _toConsumableArray(this._allResults));
      this._firstReceivedPage = page;
    }

    this._prevState = currentState;
    var hasPrevious = this._firstReceivedPage > 0;
    var lastPageIndex = nbPages - 1;
    var hasMore = page < lastPageIndex;

    var refinePrevious = function refinePrevious(event) {
      return _this.refine(event, _this._firstReceivedPage - 1);
    };

    var refineNext = function refineNext(event) {
      return _this.refine(event, _this._lastReceivedPage + 1);
    };

    return {
      hits: this._allResults,
      hasPrevious: hasPrevious,
      hasMore: hasMore,
      refinePrevious: refinePrevious,
      refineNext: refineNext
    };
  },
  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {
    return searchParameters.setQueryParameters({
      page: getCurrentRefinement(props, searchState, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      }) - 1
    });
  },
  refine: function refine(props, searchState, event, index) {
    if (index === undefined && this._lastReceivedPage !== undefined) {
      index = this._lastReceivedPage + 1;
    } else if (index === undefined) {
      index = getCurrentRefinement(props, searchState, {
        ais: props.contextValue,
        multiIndexContext: props.indexContextValue
      });
    }

    var id = getId();

    var nextValue = _defineProperty({}, id, index + 1);

    var resetPage = false;
    return refineValue(searchState, nextValue, {
      ais: props.contextValue,
      multiIndexContext: props.indexContextValue
    }, resetPage);
  }
});